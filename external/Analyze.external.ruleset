<?xml version="1.0" encoding="utf-8"?>
<!--
  Copyright (c) Microsoft Corporation
  SPDX-License-Identifier: MIT
-->
<RuleSet Name="External rules" Description="Override parent ruleset" ToolsVersion="16.0">
  <Include Path="..\Analyze.default.ruleset" Action="Default" />
  <Rules AnalyzerId="Microsoft.Analyzers.NativeCodeAnalysis" RuleNamespace="Microsoft.Rules.Native">
      <!-- Set this to warning due to https://github.com/vbpf/ebpf-verifier/issues/239 -->
      <Rule Id="C6011" Action="Warning" />
      <!-- Arithmetic overflow: Using operator 'operator' on a size-a byte value and then casting the result to a size-b byte value. Cast the value to the wider type before calling operator 'operator' to avoid overflow -->
      <Rule Id="C26451" Action="Warning" />
      <!-- Variable '%variable%' is uninitialized. Always initialize a member variable (type.6). -->
      <Rule Id="C26495" Action="Warning" />
      <!-- Warning C26812: Prefer 'enum class' over 'enum' (Enum.3) -->
      <Rule Id="C26812" Action="Warning" />
      <!-- "This kind of function may not throw. Declare it 'noexcept'." -->
      <Rule Id="C26439" Action="Warning" />
      <!-- Arithmetic overflow: '%operator%' operation causes overflow at compile time. Use a wider type to store the operands -->
      <Rule Id="C26450" Action="Warning" />
      <!-- Unannotated fallthrough between switch labels (es.78). -->
      <Rule Id="C26819" Action="Warning" />
      <!-- Potentially expensive copy of variable name in range-for loop. Consider making it a const reference (es.71). -->
      <Rule Id="C26817" Action="Warning" />
      <!-- Assigning by value when a const-reference would suffice, use const auto& instead (p.9). -->
      <Rule Id="C26820" Action="Warning" />
  </Rules>
</RuleSet>