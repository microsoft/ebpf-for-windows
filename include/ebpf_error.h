// Copyright (c) eBPF for Windows contributors
// SPDX-License-Identifier: MIT

#pragma once

#include "ebpf_result.h"

#if !defined(_AMD64_)
#define _AMD64_
#endif

typedef _Return_type_success_(return >= 0) LONG NTSTATUS;

// Values match those found in ntstatus.h.
// Including ntstatus.h with Windows headers creates redefinition conflicts so including ntstatus.h is avoided.
#define NTSTATUS_SUCCESS                   ((NTSTATUS)0x00000000L)
#define NTSTATUS_UNSUCCESSFUL              ((NTSTATUS)0xC0000001L)
#define NTSTATUS_VERIFIER_STOP             ((NTSTATUS)0xC0000421L)
#define NTSTATUS_NONE_MAPPED               ((NTSTATUS)0xC0000073L)
#define NTSTATUS_GENERIC_COMMAND_FAILED    ((NTSTATUS)0xC0150026L)
#define NTSTATUS_INVALID_HANDLE            ((NTSTATUS)0xC0000008L)
#define NTSTATUS_INVALID_DEVICE_REQUEST    ((NTSTATUS)0xC0000010L)
#define NTSTATUS_INVALID_PARAMETER         ((NTSTATUS)0xC0000030L)
#define NTSTATUS_OBJECT_PATH_NOT_FOUND     ((NTSTATUS)0xC000003AL)
#define NTSTATUS_OBJECTID_EXISTS           ((NTSTATUS)0xC000022BL)
#define NTSTATUS_NO_SUCH_FILE              ((NTSTATUS)0xC000000FL)
#define NTSTATUS_OBJECT_NAME_EXISTS        ((NTSTATUS)0x40000000L)
#define NTSTATUS_RESOURCE_NOT_OWNED        ((NTSTATUS)0xC0000264L)
#define NTSTATUS_NO_MEMORY                 ((NTSTATUS)0xC0000017L)
#define NTSTATUS_TOO_MANY_COMMANDS         ((NTSTATUS)0xC00000C1L)
#define NTRPC_NT_CALL_FAILED               ((NTSTATUS)0xC002001BL)
#define NTSTATUS_ALREADY_INITIALIZED       ((NTSTATUS)0xC0000510L)
#define NTSTATUS_INVALID_IMAGE_FORMAT      ((NTSTATUS)0xC000007BL)
#define NTSTATUS_NOT_SUPPORTED             ((NTSTATUS)0xC00000BBL)
#define NTSTATUS_NOT_FOUND                 ((NTSTATUS)0xC0000225L)
#define NTSTATUS_ACCESS_DENIED             ((NTSTATUS)0xC0000022L)
#define NTSTATUS_CONTENT_BLOCKED           ((NTSTATUS)0xC0000804L)
#define NTSTATUS_INTEGER_OVERFLOW          ((NTSTATUS)0xC0000095L)
#define NTSTATUS_DRIVER_UNABLE_TO_LOAD     ((NTSTATUS)0xC000026CL)
#define NTSTATUS_BUFFER_OVERFLOW           ((NTSTATUS)0x80000005L)
#define NTSTATUS_NO_MORE_MATCHES           ((NTSTATUS)0xC0000273L)
#define NTSTATUS_ALREADY_REGISTERED        ((NTSTATUS)0xC0000718L)
#define NTSTATUS_TOO_MANY_NODES            ((NTSTATUS)0xC000020EL)
#define NTSTATUS_PENDING                   ((NTSTATUS)0x00000103L)
#define NTSTATUS_INSUFFICIENT_RESOURCES    ((NTSTATUS)0xC000009AL)
#define NTSTATUS_CANCELLED                 ((NTSTATUS)0xC0000120L)
#define NTSTATUS_ACCESS_VIOLATION          ((NTSTATUS)0xC0000005L)
#define NTSTATUS_TIMEOUT                   ((NTSTATUS)0x00000102L)
#define NTSTATUS_INVALID_DEVICE_STATE      ((NTSTATUS)0xC0000184L)
#define NTSTATUS_INVALID_STATE_TRANSITION  ((NTSTATUS)0xC000A003L)

// Mapping from each eBPF result to NTSTATUS
// (and also show the Win32 error code that the NTSTATUS maps to).
// This should be consistent with win32_error_code_to_ebpf_result()
// in include\ebpf_utilities.h.
static const NTSTATUS _ebpf_result_mapping[] = {
    /* EBPF_SUCCESS */ NTSTATUS_SUCCESS /* ERROR_SUCCESS */,
    /* EBPF_VERIFICATION_FAILED */ NTSTATUS_VERIFIER_STOP /* ERROR_VERIFIER_STOP */,
    /* EBPF_JIT_COMPILATION_FAILED */ NTSTATUS_NONE_MAPPED /* ERROR_NONE_MAPPED */,
    /* EBPF_PROGRAM_LOAD_FAILED */ NTSTATUS_GENERIC_COMMAND_FAILED /* ERROR_GENERIC_COMMAND_FAILED */,
    /* EBPF_INVALID_FD */ NTSTATUS_INVALID_HANDLE /* ERROR_INVALID_HANDLE */,
    /* EBPF_INVALID_OBJECT */ NTSTATUS_INVALID_DEVICE_REQUEST /* ERROR_INVALID_FUNCTION */,
    /* EBPF_INVALID_ARGUMENT */ NTSTATUS_INVALID_PARAMETER /* ERROR_INVALID_PARAMETER */,
    /* EBPF_OBJECT_NOT_FOUND */ NTSTATUS_OBJECT_PATH_NOT_FOUND /* ERROR_PATH_NOT_FOUND */,
    /* EBPF_OBJECT_ALREADY_EXISTS */ NTSTATUS_OBJECTID_EXISTS /* ERROR_OBJECT_ALREADY_EXISTS */,
    /* EBPF_FILE_NOT_FOUND */ NTSTATUS_NO_SUCH_FILE /* ERROR_FILE_NOT_FOUND */,
    /* EBPF_ALREADY_PINNED */ NTSTATUS_OBJECT_NAME_EXISTS /* ERROR_OBJECT_NAME_EXISTS */,
    /* EBPF_NOT_PINNED */ NTSTATUS_RESOURCE_NOT_OWNED /* ERROR_NOT_OWNER */,
    /* EBPF_NO_MEMORY */ NTSTATUS_NO_MEMORY /* ERROR_NOT_ENOUGH_MEMORY */,
    /* EBPF_PROGRAM_TOO_LARGE */ NTSTATUS_TOO_MANY_COMMANDS /* ERROR_TOO_MANY_CMDS */,
    /* EBPF_RPC_EXCEPTION */ NTRPC_NT_CALL_FAILED /* RPC_S_CALL_FAILED */,
    /* EBPF_ALREADY_INITIALIZED */ NTSTATUS_ALREADY_INITIALIZED /* ERROR_ALREADY_INITIALIZED */,
    /* EBPF_ELF_PARSING_FAILED */ NTSTATUS_INVALID_IMAGE_FORMAT /* ERROR_BAD_EXE_FORMAT */,
    /* EBPF_FAILED */ NTSTATUS_UNSUCCESSFUL /* ERROR_GEN_FAILURE */,
    /* EBPF_OPERATION_NOT_SUPPORTED */ NTSTATUS_NOT_SUPPORTED /* ERROR_NOT_SUPPORTED */,
    /* EBPF_KEY_NOT_FOUND */ NTSTATUS_NOT_FOUND /* ERROR_NOT_FOUND */,
    /* EBPF_ACCESS_DENIED */ NTSTATUS_ACCESS_DENIED /* ERROR_ACCESS_DENIED */,
    /* EBPF_BLOCKED_BY_POLICY */ NTSTATUS_CONTENT_BLOCKED /* ERROR_CONTENT_BLOCKED */,
    /* EBPF_ARITHMETIC_OVERFLOW */ NTSTATUS_INTEGER_OVERFLOW /* ERROR_ARITHMETIC_OVERFLOW */,
    /* EBPF_EXTENSION_FAILED_TO_LOAD */ NTSTATUS_DRIVER_UNABLE_TO_LOAD /* ERROR_BAD_DRIVER */,
    /* EBPF_INSUFFICIENT_BUFFER */ NTSTATUS_BUFFER_OVERFLOW /* ERROR_MORE_DATA */,
    /* EBPF_NO_MORE_KEYS */ NTSTATUS_NO_MORE_MATCHES /* ERROR_NO_MORE_MATCHES */,
    /* EBPF_KEY_ALREADY_EXISTS */
    NTSTATUS_ALREADY_REGISTERED /* ERROR_INTERNAL_ERROR, but ought to be ERROR_ALREADY_REGISTERED */,
    /* EBPF_NO_MORE_TAIL_CALLS */ NTSTATUS_TOO_MANY_NODES /* ERROR_TOO_MANY_NAMES */,
    /* EBPF_PENDING */ NTSTATUS_PENDING /* ERROR_IO_PENDING */,
    /* EBPF_OUT_OF_SPACE */ NTSTATUS_INSUFFICIENT_RESOURCES /* ERROR_NO_SYSTEM_RESOURCES */,
    /* EBPF_CANCELED */ NTSTATUS_CANCELLED /* ERROR_OPERATION_ABORTED */,
    /* EBPF_INVALID_POINTER */ NTSTATUS_ACCESS_VIOLATION /* ERROR_NOACCESS */,
    /* EBPF_TIMEOUT */ NTSTATUS_TIMEOUT /* ERROR_TIMEOUT */,
    /* EBPF_STALE_ID */ NTSTATUS_INVALID_DEVICE_STATE /* ERROR_BAD_COMMAND */,
    /* EBPF_INVALID_STATE */ NTSTATUS_INVALID_STATE_TRANSITION /* ERROR_INVALID_STATE */,
};

/**
 * @brief Map an ebpf_result_t to a generic NTSTATUS code.
 *
 * @param[in] result ebpf_result_t to map.
 * @return The generic NTSTATUS code.
 */
static inline NTSTATUS
ebpf_result_to_ntstatus(ebpf_result_t result)
{

    if (result < 0) {
        return NTSTATUS_UNSUCCESSFUL;
    }
    if (result > ARRAYSIZE(_ebpf_result_mapping)) {
        return NTSTATUS_UNSUCCESSFUL;
    }
    return _ebpf_result_mapping[result];
}