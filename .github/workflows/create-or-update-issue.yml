# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow executes a single test, optionally gathering code coverage and logs.

name: Create or update an issue.

on:
  workflow_call:
    inputs:
      # The title of the issue to create or update.
      title:
        required: true
        type: string
      # The body of the issue to create or update.
      body:
        required: true
        type: string
      # Labels to add to the issue.
      labels:
        required: false
        type: string

permissions:
  issues: write # Required to create issues.

jobs:
  create_or_update_issue:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/github-script@c713e510dbd7d213d92d41b7a7805a986f4c5c66
        env:
          TITLE: ${{inputs.title}}
          BODY: ${{inputs.body}}
          LABELS: ${{inputs.labels}}

        with:
          script: |
            # Extract the variables from the workflow.
            const owner = process.env.GITHUB_REPOSITORY.split('/')[0]
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1]
            const body = process.env.BODY;
            const title = process.env.TITLE;
            const labels = process.env.LABELS;
            const label_array = labels ? labels.split(',') : [];
            console.log(label_array);

            # Get all issues that have these labels.
            const opts = github.rest.issues.listForRepo.endpoint.merge({
              ...context.issue,
              state: 'open',
              labels: label_array,
            });
            const issues = await github.paginate(opts);

            # Look for an existing issue with the same title.
            for (const issue of issues) {
              if (issue.title === title) {
                console.log(`Updating issue ${title}`);
                await github.rest.issues.createComment({
                  issue_number: issue.number,
                  owner,
                  repo,
                  body,
                });
                return;
              }
            }

            # Existing issue not found, create a new one.
            console.log(`Creating issue ${title}`);
            await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: title,
              body: body,
              labels: label_array,
            });
