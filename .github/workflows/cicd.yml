# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This is the top-level workflow that runs on each pull request and push to main.
# It invokes other jobs to perform builds and run tests.
# All jobs run in parallel, using build artifacts to synchronize jobs.

name: CI/CD

# Run on push so we can capture the baseline code coverage for any squash commit.
on:
  schedule:
    - cron: '00 21 * * *'
  pull_request:

concurrency:
  # Cancel any CI/CD workflow currently in progress for the same PR.
  # Allow running concurrently with any other commits.
  group: cicd-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: read  # Required by reusable-test.yml to check build status.
  security-events: write # Required by codeql task

jobs:
  # Perform the regular build.
  regular:
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64

  # Build with C++ static analyzer.
  analyze:
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64-Analyze
      build_options: /p:Analysis='True'

  # Build with C++ address sanitizer.
  sanitize:
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64-Sanitize
      build_options: /p:Sanitizer='True'

  codeql:
    if: github.event_name != 'pull_request'
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64-CodeQl
      build_codeql: true

  # Run the unit tests in GitHub.
  unit_tests:
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: unit_tests
      test_command: unit_tests.exe -s
      build_job: regular / build
      build_artifact: Build-x64
      environment: windows-2019
      code_coverage: true
      gather_dumps: true

  # Run the API tests in GitHub.
  ebpf_client:
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: ebpf_client
      test_command: ebpf_client.exe -s
      build_job: regular / build
      build_artifact: Build-x64
      environment: windows-2019
      code_coverage: true
      gather_dumps: true

  # Run the fuzzing tests in GitHub.
  fuzzing:
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: fuzzing
      test_command: fuzz.exe -s
      build_job: regular / build
      build_artifact: Build-x64
      environment: windows-2019
      code_coverage: true
      gather_dumps: true

  # Run the bpf2c tests in GitHub.
  bpf2c:
    uses: ./.github/workflows/reusable-test.yml
    with:
      pre_test: call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\Common7\Tools\VsDevCmd.bat"
      test_command: bpf2c_tests.exe -s
      name: bpf2c
      build_job: regular / build
      build_artifact: Build-x64
      environment: windows-2019
      code_coverage: true
      gather_dumps: true

  # Run the quick stress tests in GitHub.
  stress:
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: stress
      # Until there is a dedicated stress test, re-use the perf test.
      test_command: ebpf_performance.exe
      build_job: regular / build
      build_artifact: Build-x64
      environment: windows-2019
      # No code coverage on stress.
      code_coverage: false
      gather_dumps: true

  # Run the driver tests on self-hosted runners.
  driver:
    uses: ./.github/workflows/reusable-test.yml
    # Only run this on repos that have self-host runners.
    if: github.repository == 'microsoft/ebpf-for-windows'
    with:
      pre_test: powershell ".\setup_ebpf_cicd_tests.ps1"
      test_command: powershell ".\execute_ebpf_cicd_tests.ps1"
      post_test: powershell ".\cleanup_ebpf_cicd_tests.ps1"
      name: driver
      build_job: regular / build
      build_artifact: Build-x64
      environment: ebpf_cicd_tests
      # driver test copies dumps to testlog folder.
      gather_dumps: false

  # Run the unit tests in GitHub with address sanitizer.
  sanitize_unit_tests:
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: unit_tests
      test_command: unit_tests.exe -s
      build_job: sanitize / build
      build_artifact: Build-x64-Sanitize
      environment: windows-2019
      code_coverage: false
      gather_dumps: true
