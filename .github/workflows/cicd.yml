# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This is the top-level workflow that runs on each pull request and push to main.
# It invokes other jobs to perform builds and run tests.
# All jobs run in parallel, using build artifacts to synchronize jobs.

name: CI/CD

on:
  # Run on a daily schedule to perform the full set of tests.
  schedule:
    - cron: '00 21 * * *'
  # Run on pull request to validate code changes.
  pull_request:
  # Run on push so we can capture the baseline code coverage.
  push:
    branches: [ main ]

concurrency:
  # Cancel any CI/CD workflow currently in progress for the same PR.
  # Allow running concurrently with any other commits.
  group: cicd-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read
  checks: read  # Required by reusable-test.yml to check build status.
  security-events: write # Required by codeql task.
  issues: write # Required to create issues.

jobs:
  # Jobs to run on pull, push, and schedule.
  # ---------------------------------------------------------------------------

  # Perform the regular build.
  regular:
    # Always run this job.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64
      generate_release_package: true
      build_nuget: true
      build_options: /p:ReleaseJIT='True'

  cmake:
    # Always run this job.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-cmake-build.yml
    with:
      build_artifact: Build-x64-cmake

  # Perform the libfuzzer build.
  libfuzzer:
    # Always run this job.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64-fuzzer
      cxx_flags: /fsanitize-coverage=inline-bool-flag /fsanitize-coverage=edge /fsanitize-coverage=trace-cmp /fsanitize-coverage=trace-div /ZH:SHA_256
      ld_flags: '"clang_rt.fuzzer_MD-x86_64.lib" "libsancov.lib"'
      build_options: /p:Fuzzer='True' /t:tests\libfuzzer\execution_context_fuzzer /t:tests\libfuzzer\bpf2c_fuzzer /t:tests\libfuzzer\verifier_fuzzer /t:tests\libfuzzer\core_helper_fuzzer /t:tests\libfuzzer\netebpfext_fuzzer

  # Run the unit tests in GitHub.
  unit_tests:
    # Always run this job.
    needs: regular
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: unit_tests
      pre_test: appverif -enable Exceptions Handles Heaps Leak Locks Memory SRWLock Threadpool TLS DangerousAPIs DirtyStacks TimeRollOver -for unit_tests.exe
      test_command: .\unit_tests.exe -d yes
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: true
      gather_dumps: true
      capture_etw: true

  unit_tests_leak_detection:
    # Always run this job.
    needs: regular
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: unit_tests_with_leak_detection
      test_command: .\unit_tests.exe -d yes
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: true
      gather_dumps: true
      capture_etw: true
      leak_detection: true

  # Run the netebpfext unit tests in GitHub.
  netebpf_ext_unit_tests:
    # Always run this job.
    needs: regular
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: netebpf_ext_unit_tests
      pre_test: appverif -enable Exceptions Handles Heaps Leak Locks Memory SRWLock Threadpool TLS DangerousAPIs DirtyStacks TimeRollOver -for unit_tests.exe
      test_command: .\netebpfext_unit.exe -d yes
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: true
      gather_dumps: true
      capture_etw: true

  # Run the bpf2c tests in GitHub.
  bpf2c:
    # Always run this job.
    needs: regular
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-test.yml
    with:
      test_command: .\bpf2c_tests.exe -d yes
      name: bpf2c
      build_artifact: Build-x64
      environment: windows-2022
      vs_dev: true
      code_coverage: true
      gather_dumps: true
      capture_etw: true

  # Run the bpf2c conformance tests in GitHub.
  bpf2c_conformance:
    # Always run this job.
    needs: regular
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/reusable-test.yml
    with:
      pre_test: Invoke-WebRequest https://github.com/Alan-Jowett/bpf_conformance/releases/download/v0.0.3/bpf_conformance_runner.exe -OutFile bpf_conformance_runner.exe
      test_command: .\bpf_conformance_runner.exe --test_file_directory %SOURCE_ROOT%\external\ebpf-verifier\external\bpf_conformance\tests --exclude_regex lock* --plugin_path bpf2c_plugin.exe --debug true --plugin_options "--include %SOURCE_ROOT%\include"
      name: bpf2c_conformance
      build_artifact: Build-x64
      environment: windows-2022
      vs_dev: true
      code_coverage: true
      gather_dumps: true
      capture_etw: true

  # Run the driver tests on self-hosted runners.
  driver:
    # Always run this job.
    # Only run this on repos that have self-host runners.
    needs: regular
    if: github.repository == 'microsoft/ebpf-for-windows'
    uses: ./.github/workflows/reusable-test.yml
    with:
      pre_test: .\setup_ebpf_cicd_tests.ps1
      test_command: .\execute_ebpf_cicd_tests.ps1
      post_test: .\cleanup_ebpf_cicd_tests.ps1
      name: driver
      build_artifact: Build-x64
      environment: ebpf_cicd_tests
      # driver test copies dumps to testlog folder.
      gather_dumps: false
      # driver tests manually gather code coverage
      code_coverage: false

  ossar:
    # Always run this job.
    needs: regular
    if: github.event_name == 'schedule' || github.event_name == 'pull_request' || github.event_name == 'push'
    uses: ./.github/workflows/ossar-scan.yml
    with:
      build_artifact: Build-x64

  # Additional jobs to run on pull and schedule only (skip push).
  # ---------------------------------------------------------------------------
  # Build with C++ static analyzer.
  analyze:
    # Only run on schedule and pull request.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64-Analyze
      # Analysis on external projects is conditional, as on small CI/CD VMs the compiler can run OOM
      build_options: /p:Analysis='True' /p:AnalysisOnExternal='False'

  # Build with C++ address sanitizer.
  sanitize:
    # Only run on schedule and pull request.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64-Sanitize
      build_options: /p:AddressSanitizer='True'

  bpf2c_fuzzer:
    needs: libfuzzer
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: bpf2c_fuzzer
      test_command: .\bpf2c_fuzzer.exe bpf2c_fuzzer_corpus -use_value_profile=1 -max_total_time=300 -artifact_prefix=Artifacts\
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

  bpf2c_fuzzer_scheduled:
    needs: libfuzzer
    if: github.event_name == 'schedule'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: bpf2c_fuzzer
      test_command: .\bpf2c_fuzzer.exe bpf2c_fuzzer_corpus -use_value_profile=1 -max_total_time=900 -artifact_prefix=Artifacts\
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

  execution_context_fuzzer:
    needs: libfuzzer
    # Always run this job.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: execution_context_fuzzer
      test_command: .\execution_context_fuzzer.exe execution_context_fuzzer_corpus -use_value_profile=1 -runs=3000 -artifact_prefix=Artifacts\
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

  # Run the verifier fuzzer.
  verifier_fuzzer:
    needs: libfuzzer
    # Always run this job.
    if: github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: verifier_fuzzer
      test_command: .\verifier_fuzzer.exe verifier_corpus -use_value_profile=1 -max_total_time=300 -artifact_prefix=Artifacts\
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

  verifier_fuzzer_scheduled:
    needs: libfuzzer
    # Always run this job.
    if: github.event_name == 'schedule'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: verifier_fuzzer
      test_command: .\verifier_fuzzer.exe verifier_corpus -use_value_profile=1 -max_total_time=900 -artifact_prefix=Artifacts\
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true


  core_helper_fuzzer:
    needs: libfuzzer
    # Always run this job.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: core_helper_fuzzer
      test_command: .\core_helper_fuzzer core_helper_corpus -max_len=139 -runs=1000 -use_value_profile=1 -artifact_prefix=Artifacts\
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

  netebpfext_fuzzer:
    needs: libfuzzer
    # Always run this job.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: netebpfext_fuzzer
      test_command: .\netebpfext_fuzzer netebpfext_corpus -max_len=12 -runs=1000 -use_value_profile=1 -artifact_prefix=Artifacts\
      build_artifact: Build-x64-fuzzer
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

  # Run Cilium regression tests in GitHub.
  cilium_tests:
    needs: regular
    # Only run on schedule and pull request.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: cilium_tests
      test_command: .\cilium_tests.exe -d yes
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: false
      gather_dumps: true

  # Run the quick stress tests in GitHub.
  stress:
    needs: regular
    # Only run on schedule and pull request.
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: stress
      # Until there is a dedicated stress test, re-use the perf test.
      test_command: .\ebpf_performance.exe
      build_artifact: Build-x64
      environment: windows-2022
      # No code coverage on stress.
      code_coverage: false
      gather_dumps: true

  # Run the unit tests in GitHub with address sanitizer.
  sanitize_unit_tests:
    needs: sanitize
    if: github.event_name == 'schedule' || github.event_name == 'pull_request'
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: unit_tests
      test_command: .\unit_tests.exe -d yes
      build_artifact: Build-x64-Sanitize
      environment: windows-2022
      code_coverage: false
      gather_dumps: true
      capture_etw: true

  # Run the low memory simulator in GitHub.
  low_memory:
    needs: regular
    uses: ./.github/workflows/reusable-test.yml
    with:
      name: low_memory
      test_command: .\unit_tests.exe
      build_artifact: Build-x64
      environment: windows-2022
      code_coverage: true
      gather_dumps: true
      low_memory: true

  # Additional jobs to run on a schedule only (skip push and pull request).
  # ---------------------------------------------------------------------------
  codeql:
    # Only run during daily scheduled run
    if: github.event_name == 'schedule'
    uses: ./.github/workflows/reusable-build.yml
    with:
      build_artifact: Build-x64-CodeQl
      build_codeql: true
