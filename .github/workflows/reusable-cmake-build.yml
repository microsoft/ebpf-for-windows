# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow performs a CMake-based build of the project.

name: Reusable CMake Workflow

on:
  workflow_call:
    inputs:
      # Name associated with the output of this build.
      build_artifact:
        required: true
        type: string

permissions:
  contents: read

jobs:
  build:
    timeout-minutes: 60

    strategy:
      matrix:
        configurations: [Debug, Release]

    runs-on: windows-2019

    env:
      BUILD_ARTIFACT_NAME: ${{inputs.build_artifact}}
      BUILD_CONFIGURATION: ${{matrix.configurations}}
      BUILD_PLATFORM: x64
      CMAKE_GENERATOR: Visual Studio 16 2019
      PLATFORM_TOOLSET: v142

    steps:
    - uses: actions/checkout@b0e28b5ac45a892f91e7d036f8200cf5ed489415
      with:
        submodules: 'recursive'

    - name: Install tools
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        choco install -y llvm --version 11.0.1 --allow-downgrade
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Cache nuget packages
      uses: actions/cache@c3f1317a9e7b1ef106c153ac8c0f00fed3ddbc0d
      env:
        cache-name: cache-nuget-modules
      with:
        path: packages
        key: ${{ runner.os }}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}-${{env.BUILD_ARTIFACT_NAME}}-${{ hashFiles('**/packages.config') }}

    - name: Configure the project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: cmd
      run: |
        cmake -S . -B build -G "${{env.CMAKE_GENERATOR}}" -A ${{env.BUILD_PLATFORM}} -T ${{env.PLATFORM_TOOLSET}}

    - name: Build the project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: cmd
      run: |
        cmake --build build --config ${{env.BUILD_CONFIGURATION }}

    # Download and extract demo repo artifacts. These then get uploaded along with the build artifacts.
    # The subequent tests will directly get these when they download the build artifacts. In case
    # a test fails, the .o files used for the test will be available in the uploaded build artifacts.
    - name: Download demo repository artifacts
      uses: dawidd6/action-download-artifact@b7337e51c4775d1f22357423ade50ee0a5f5779e
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: cicd.yml
        workflow_conclusion: success
        name: x64-${{ matrix.configurations }}-cilium-xdp
        path: ${{github.workspace}}
        repo: microsoft/ebpf-for-windows-demo
        check_artifacts:  false
        search_artifacts: false
        skip_unpack: false

    - name: Extract artifacts to build path
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd ${{github.workspace}}/build/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        tar -xf ..\..\..\x64-${{ matrix.configurations }}-cilium-xdp.zip

    - name: Upload Build Output
      uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8
      with:
        name: ${{inputs.build_artifact}} ${{matrix.configurations}}
        path: ${{github.workspace}}/build/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        retention-days: 5
