# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow performs a build of the project and uploads the result as a build artifact.

name: Reusable MSBuild Workflow

on:
  workflow_call:
    inputs:
      # Name associated with the output of this build.
      build_artifact:
        required: true
        type: string
      # Additional options passed to msbuild.
      build_options:
        required: false
        type: string
      generate_release_package:
        required: false
        type: boolean
      build_codeql:
        required: false
        type: boolean

permissions:
  contents: read
  security-events: write # Required by codeql task

jobs:
  build:
    timeout-minutes: 60

    strategy:
      matrix:
        configurations: [Debug, Release]
    runs-on: windows-2019
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: ebpf-for-windows.sln
      BUILD_ARTIFACT_NAME: ${{inputs.build_artifact}}
      BUILD_CONFIGURATION: ${{matrix.configurations}}
      BUILD_PLATFORM: x64
      BUILD_OPTIONS: ${{inputs.build_options}}

    steps:
    - uses: actions/checkout@b0e28b5ac45a892f91e7d036f8200cf5ed489415
      with:
        submodules: 'recursive'

    - name: Initialize CodeQL
      if: inputs.build_codeql == true
      uses: github/codeql-action/init@1ed1437484560351c5be56cf73a48a279d116b78
      with:
        languages: 'cpp'

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@becb80cf9a036187bb1e07e74eb64e25850d757a

    - name: Install tools
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        choco install -y llvm
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Cache nuget packages
      uses: actions/cache@48af2dc4a9e8278b89d7fa154b955c30c6aaab09
      env:
        cache-name: cache-nuget-modules
      with:
        path: packages
        key: ${{ runner.os }}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}-${{env.BUILD_ARTIFACT_NAME}}-${{ hashFiles('**/packages.config') }}

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Cache verifier project
      uses: actions/cache@f63a711791a8e7cc2d5463afc081136e00085800
      env:
        cache-name: cache-verifier-project
      with:
        path: external/ebpf-verifier/build
        key: ${{ runner.os }}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}-${{env.BUILD_ARTIFACT_NAME}}-${{ hashFiles('.git/modules/external/ebpf-verifier/HEAD') }}

    - name: Create verifier project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cmake -G "Visual Studio 16 2019" -S external\ebpf-verifier -B external\ebpf-verifier\build

    - name: Create catch2 project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cmake -G "Visual Studio 16 2019" -S external\catch2 -B external\catch2\build -DBUILD_TESTING=OFF

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}} ${{env.BUILD_OPTIONS}}

    - name: Copy VC Libs for Sanitizer
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: copy "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Tools\MSVC\14.29.30133\bin\Hostx64\x64\clang*" .

    - name: Upload Build Output
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
      with:
        name: ${{inputs.build_artifact}} ${{matrix.configurations}}
        path: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        retention-days: 5

    - name: Generate the package data
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      shell: cmd
      working-directory: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      env:
        SOURCE_DIR: ${{github.workspace}}
      run: |
        ${{github.workspace}}/scripts/create_package_data.bat

    - name: Generate the MSI release package
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cmake -S packaging -B package -DEBPFFORWINDOWS_PROGRAM_DATA="${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\package_data" "-DEBPFFORWINDOWS_VERSION=1.0.0" -DCPACK_GENERATOR=WIX
        cmake --build package --target package

    - name: Locate the packages
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      id: packages
      shell: bash
      run: |
        echo ::set-output name=REL_MSI_PACKAGE_PATH::$(ls package/*.msi)

    - name: Upload the MSI package
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
      with:
        name: ebpf-for-windows.msi
        path: ${{ steps.packages.outputs.REL_MSI_PACKAGE_PATH }}

    - name: Perform CodeQL Analysis
      if: inputs.build_codeql == true
      uses: github/codeql-action/analyze@1ed1437484560351c5be56cf73a48a279d116b78
