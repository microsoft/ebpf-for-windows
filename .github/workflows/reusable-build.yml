# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow performs a build of the project and uploads the result as a build artifact.

name: Reusable MSBuild Workflow

on:
  workflow_call:
    inputs:
      # Name associated with the output of this build.
      build_artifact:
        required: true
        type: string
      # Additional options passed to msbuild.
      build_options:
        required: false
        type: string
      generate_release_package:
        required: false
        type: boolean
      build_codeql:
        required: false
        type: boolean
      build_nuget:
        required: false
        type: boolean
      cxx_flags:
        required: false
        type: string
      ld_flags:
        required: false
        type: string

permissions:
  contents: read
  security-events: write # Required by codeql task

jobs:
  build:
    timeout-minutes: 90

    strategy:
      matrix:
        configurations: [Debug, Release]
    runs-on: windows-2022
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: ebpf-for-windows.sln
      BUILD_ARTIFACT_NAME: ${{inputs.build_artifact}}
      BUILD_CONFIGURATION: ${{matrix.configurations}}
      BUILD_PLATFORM: x64
      BUILD_OPTIONS: ${{inputs.build_options}}
      CXX_FLAGS: ${{inputs.cxx_flags}}
      LD_FLAGS: ${{inputs.ld_flags}}

    steps:
    - uses: actions/checkout@ac593985615ec2ede58e132d2e21d2b1cbd6127c
      with:
        submodules: 'recursive'

    - name: Initialize CodeQL
      if: inputs.build_codeql == true
      uses: github/codeql-action/init@959cbb7472c4d4ad70cdfe6f4976053fe48ab394
      with:
        languages: 'cpp'

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@34cfbaee7f672c76950673338facd8a73f637506

    - name: Install tools
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        choco install -y llvm --version 11.0.1 --allow-downgrade
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Cache nuget packages
      uses: actions/cache@4723a57e26efda3a62cbde1812113b730952852d
      env:
        cache-name: cache-nuget-modules
      with:
        path: packages
        key: ${{ runner.os }}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}-${{env.BUILD_ARTIFACT_NAME}}-${{ hashFiles('**/packages.config') }}

    - name: Restore NuGet packages
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Create verifier project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        CXXFLAGS: /ZH:SHA_256 ${{env.CXX_FLAGS}}
        LDFLAGS: ${{env.LD_FLAGS}}
      run: |
        cmake -G "Visual Studio 17 2022" -S external\ebpf-verifier -B external\ebpf-verifier\build

    - name: Create catch2 project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        CXXFLAGS: /ZH:SHA_256 ${{env.CXX_FLAGS}}
        LDFLAGS: ${{env.LD_FLAGS}}
      run: |
        cmake -G "Visual Studio 17 2022" -S external\catch2 -B external\catch2\build -DBUILD_TESTING=OFF

    - name: Create ubpf project
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        CXXFLAGS: /ZH:SHA_256 ${{env.CXX_FLAGS}}
        LDFLAGS: ${{env.LD_FLAGS}}
      run: |
        cmake -G "Visual Studio 17 2022" -S external\ubpf -B external\ubpf\build

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}} ${{env.BUILD_OPTIONS}}

    - name: Copy VC Libs for Sanitizer
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: copy "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\bin\Hostx64\x64\clang*" .

    # Download and extract demo repo artifacts. These then get uploaded along with the build artifacts.
    # The subequent tests will directly get these when they download the build artifacts. In case
    # a test fails, the .o files used for the test will be available in the uploaded build artifacts.
    - name: Download demo repository artifacts
      uses: dawidd6/action-download-artifact@bd10f381a96414ce2b13a11bfa89902ba7cea07f
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: cicd.yml
        workflow_conclusion: success
        name: x64-${{ matrix.configurations }}-cilium-xdp
        path: ${{github.workspace}}
        repo: microsoft/ebpf-for-windows-demo
        check_artifacts:  false
        search_artifacts: false
        skip_unpack: true

    - name: Extract artifacts to build path
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        tar -xf ..\..\x64-${{ matrix.configurations }}-cilium-xdp.zip

    - name: Upload Build Output
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      with:
        name: ${{inputs.build_artifact}} ${{matrix.configurations}}
        path: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        retention-days: 5

    - name: Generate the package data
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      shell: cmd
      working-directory: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      env:
        SOURCE_DIR: ${{github.workspace}}
      run: |
        ${{github.workspace}}\scripts\create_package_data.bat ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}

    - name: Generate the MSI release package
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        $version = scripts\Get-Version.ps1
        cmake -S tools\setup -B build\setup -DEBPFFORWINDOWS_PROGRAM_DATA="${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\package_data" "-DEBPFFORWINDOWS_VERSION=$version" -DCPACK_GENERATOR=WIX
        cmake --build build\setup --target package

    - name: Locate the packages
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      id: packages
      shell: bash
      run: |
        echo "REL_MSI_PACKAGE_PATH=$(ls build/setup/*.msi)" >> $GITHUB_OUTPUT

    - name: Upload the MSI package
      if: matrix.configurations == 'Release' && inputs.generate_release_package == true
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      with:
        name: ebpf-for-windows.msi
        path: ${{ steps.packages.outputs.REL_MSI_PACKAGE_PATH }}

    - name: Build nuget package
      if: matrix.configurations == 'Release' && inputs.build_nuget == true
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}} ${{env.BUILD_OPTIONS}} /t:tools\nuget

    - name: Upload the nuget package
      if: matrix.configurations == 'Release' && inputs.build_nuget == true
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      with:
        name: ebpf-for-windows nuget
        path: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/*.nupkg

    - name: Perform CodeQL Analysis
      if: inputs.build_codeql == true
      uses: github/codeql-action/analyze@959cbb7472c4d4ad70cdfe6f4976053fe48ab394
