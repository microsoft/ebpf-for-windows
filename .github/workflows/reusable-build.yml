# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow performs a build of the project and uploads the result as a build artifact.

name: Reusable MSBuild Workflow

on:
  workflow_call:
    inputs:
      # Name associated with the output of this build.
      build_artifact:
        required: true
        type: string
      # Additional options passed to msbuild.
      build_options:
        required: false
        type: string
      generate_release_package:
        required: false
        type: boolean
      build_codeql:
        required: false
        type: boolean
      build_msi:
        required: false
        type: boolean
      build_nuget:
        required: false
        type: boolean
      cxx_flags:
        required: false
        type: string
      ld_flags:
        required: false
        type: string
      configurations:
        required: false
        type: string
        default: '["Debug", "Release"]'

permissions:
  contents: read
  security-events: write # Required by codeql task

jobs:
  build:
    timeout-minutes: 90

    strategy:
      matrix:
        configurations: ${{ fromJSON(inputs.configurations) }}
    runs-on: windows-2022
    env:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: ebpf-for-windows.sln
      BUILD_ARTIFACT_NAME: ${{inputs.build_artifact}}
      BUILD_CONFIGURATION: ${{matrix.configurations}}
      BUILD_PLATFORM: x64
      BUILD_OPTIONS: ${{inputs.build_options}}
      CXX_FLAGS: ${{inputs.cxx_flags}}
      LD_FLAGS: ${{inputs.ld_flags}}

    steps:
    - id: skip_check
      uses: fkirc/skip-duplicate-actions@f75f66ce1886f00957d99748a42c724f4330bdcf # v5.3.1
      with:
        cancel_others: 'false'
        paths_ignore: '["**.md", "**/docs/**"]'

    - name: Set MSVC Environment Variables
      shell: cmd
      run: |
        call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvars64.bat"
        powershell.exe "echo 'msvc_tools_path=%VCToolsInstallDir%' | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append"
        powershell.exe "echo 'msvc_tools_version=%VCToolsVersion%' | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append"

    - uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11
      if: steps.skip_check.outputs.should_skip != 'true'
      with:
        submodules: 'recursive'

    - name: Configure Windows Error Reporting to make a local copy of any crashes that occur.
      id: configure_windows_error_reporting
      if: steps.skip_check.outputs.should_skip != 'true'
      run: |
        mkdir c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -ErrorAction SilentlyContinue
        New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpType" -Value 2 -PropertyType DWord -ErrorAction SilentlyContinue
        New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpFolder" -Value "c:\dumps\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}" -PropertyType ExpandString -ErrorAction SilentlyContinue

    - name: Initialize CodeQL
      if: inputs.build_codeql == true && steps.skip_check.outputs.should_skip != 'true'
      uses: github/codeql-action/init@cdcdbb579706841c47f7063dda365e292e5cad7a
      with:
        languages: 'cpp'

    - name: Add MSBuild to PATH
      uses: microsoft/setup-msbuild@1ff57057b5cfdc39105cd07a01d78e9b0ea0c14c

    - name: Setup choco cache folder
      # Set the choco cache to a local folder so that it can be cached.
      if: steps.skip_check.outputs.should_skip != 'true'
      id: choco-cache
      run: |
        mkdir ${{github.workspace}}\choco_cache
        choco config set --name cacheLocation --value ${{github.workspace}}\choco_cache

    - name: Cache choco packages
      # Add cache entry for any choco packages that are installed.
      # The cache key is based on the hash of this file so if any choco packages are added or removed, the cache will be invalidated.
      if: steps.skip_check.outputs.should_skip != 'true'
      uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84
      env:
        cache-name: cache-choco-packages
      with:
        path: ${{github.workspace}}\choco_cache
        key: ${{ hashFiles('.github/workflows/reusable-build.yml') }}

    - name: Install tools
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        choco install -y llvm --version 11.0.1 --allow-downgrade
        echo "C:\Program Files\LLVM\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        where clang.exe

    - name: Cache nuget packages
      if: steps.skip_check.outputs.should_skip != 'true'
      uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84
      env:
        cache-name: cache-nuget-modules
      with:
        path: packages
        key: ${{ runner.os }}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}-${{env.BUILD_ARTIFACT_NAME}}-${{ hashFiles('**/packages.config') }}-${{env.msvc_tools_version}}

    - name: Restore NuGet packages
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: nuget restore ${{env.SOLUTION_FILE_PATH}}

    - name: Cache verifier project
      # The hash is based on the HEAD of the ebpf-verifier submodule, the Directory.Build.props file, and the build variant.
      if: steps.skip_check.outputs.should_skip != 'true'
      uses: actions/cache@704facf57e6136b1bc63b828d79edcd491f0ee84
      env:
        cache-name: cache-verifier-project
      with:
        path: external/ebpf-verifier/build
        key: ${{ runner.os }}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}-${{env.BUILD_ARTIFACT_NAME}}-${{ hashFiles('.git/modules/external/ebpf-verifier/HEAD') }}-${{ hashFiles('external/Directory.Build.props')}}-${{env.msvc_tools_version}}

    - name: Create verifier project
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        CXXFLAGS: /ZH:SHA_256 ${{env.CXX_FLAGS}}
        LDFLAGS: ${{env.LD_FLAGS}}
      run: |
        cmake -G "Visual Studio 17 2022" -S external\ebpf-verifier -B external\ebpf-verifier\build

    - name: Create catch2 project
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        CXXFLAGS: /ZH:SHA_256 ${{env.CXX_FLAGS}}
        LDFLAGS: ${{env.LD_FLAGS}}
      run: |
        cmake -G "Visual Studio 17 2022" -S external\catch2 -B external\catch2\build -DBUILD_TESTING=OFF

    - name: Create ubpf project
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      env:
        CXXFLAGS: /ZH:SHA_256 ${{env.CXX_FLAGS}}
        LDFLAGS: ${{env.LD_FLAGS}}
      run: |
        cmake -G "Visual Studio 17 2022" -S external\ubpf -B external\ubpf\build

    - name: Build
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.BUILD_OPTIONS}} ${{env.SOLUTION_FILE_PATH}}

    - name: Check DLL dependencies for distributed binaries
      if: steps.skip_check.outputs.should_skip != 'true' && ((inputs.build_artifact == 'Build-x64' && matrix.configurations == 'Debug') || (inputs.build_artifact == 'Build-x64-native-only' && matrix.configurations == 'NativeOnlyRelease'))
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: |
        ..\..\scripts\check_binary_dependencies.ps1 -BuildArtifact "${{inputs.build_artifact}}_${{env.BUILD_CONFIGURATION}}" -VsToolsPath "${{env.msvc_tools_path}}"

    - name: Test the MSI
      if: steps.skip_check.outputs.should_skip != 'true' && ((inputs.build_artifact == 'Build-x64' && matrix.configurations == 'Debug') || (inputs.build_artifact == 'Build-x64-native-only' && matrix.configurations == 'NativeOnlyRelease'))
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: |
        ..\..\scripts\check_msi_installation.ps1 -BuildArtifact "${{inputs.build_artifact}}_${{env.BUILD_CONFIGURATION}}" -MsiPath "ebpf-for-windows.msi"

    - name: Copy LLVM libs for Fuzzing & Address Sanitizing
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      shell: cmd
      run: |
        copy "${{env.msvc_tools_path}}\bin\Hostx64\x64\clang*" .

    - name: Download demo Debug repository
      if: steps.skip_check.outputs.should_skip != 'true' && (matrix.configurations == 'Debug' || matrix.configurations == 'NativeOnlyDebug')
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: Invoke-WebRequest https://github.com/microsoft/ebpf-for-windows-demo/releases/download/v0.0.2/${{env.BUILD_PLATFORM}}-Debug-cilium-xdp.zip -OutFile x64-${{env.BUILD_CONFIGURATION}}-cilium-xdp.zip

    - name: Download demo Release repository
      if: steps.skip_check.outputs.should_skip != 'true' && (matrix.configurations == 'Release' || matrix.configurations == 'NativeOnlyRelease')
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: Invoke-WebRequest https://github.com/microsoft/ebpf-for-windows-demo/releases/download/v0.0.2/${{env.BUILD_PLATFORM}}-Release-cilium-xdp.zip -OutFile x64-${{env.BUILD_CONFIGURATION}}-cilium-xdp.zip

    # Download the bpf_performance repository artifacts.
    - name: Download bpf_performance repository artifacts
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        Invoke-WebRequest https://github.com/microsoft/bpf_performance/releases/download/v0.0.3/build-Release-windows-2022.zip -OutFile bpf_performance.zip

    - name: Extract artifacts to build path
      if: steps.skip_check.outputs.should_skip != 'true' && matrix.configurations != 'FuzzerDebug'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        cd ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        tar -xf ..\..\x64-${{ matrix.configurations }}-cilium-xdp.zip

    - name: Zip Build Output
      if: always() && (steps.skip_check.outputs.should_skip != 'true')
      working-directory: ${{github.workspace}}
      run: |
        Compress-Archive -Path ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -DestinationPath .\build-${{ matrix.configurations }}.zip

    - name: Upload Build Output
      if: always() && (steps.skip_check.outputs.should_skip != 'true')
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: ${{inputs.build_artifact}}-${{matrix.configurations}}
        path: ${{github.workspace}}/build-${{ matrix.configurations }}.zip
        retention-days: 5

    - name: Upload the MSI package
      if: inputs.build_msi == true
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: ebpf-for-windows - MSI installer (${{inputs.build_artifact}}_${{env.BUILD_CONFIGURATION}})
        path: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/ebpf-for-windows.msi

    - name: Build the NuGet package
      if: inputs.build_nuget == true && matrix.configurations == 'Release' && steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}} ${{env.BUILD_OPTIONS}} /t:tools\nuget

    - name: Upload the NuGet package
      if: inputs.build_nuget == true && matrix.configurations == 'Release' && steps.skip_check.outputs.should_skip != 'true'
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: ebpf-for-windows - NuGet package (${{inputs.build_artifact}}_${{env.BUILD_CONFIGURATION}})
        path: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/eBPF-for-Windows.*.nupkg

    - name: Build the NuGet Redist package
      if: inputs.build_nuget == true && matrix.configurations == 'Release' && steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: msbuild /m /p:Configuration=${{env.BUILD_CONFIGURATION}} /p:Platform=${{env.BUILD_PLATFORM}} ${{env.SOLUTION_FILE_PATH}} ${{env.BUILD_OPTIONS}} /t:tools\redist-package

    - name: Upload the NuGet Redist package
      if: inputs.build_nuget == true && matrix.configurations == 'Release' && steps.skip_check.outputs.should_skip != 'true'
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      with:
        name: ebpf-for-windows - NuGet Redist package (${{inputs.build_artifact}}_${{env.BUILD_CONFIGURATION}})
        path: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/eBPF-for-Windows-Redist.*.nupkg

    - name: Check for crash dumps
      # Check for crash dumps even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true')
      uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
      id: check_dumps
      with:
        files: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/*.dmp

    - name: Upload any crash dumps
      # Upload crash dumps even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true') && (steps.check_dumps.outputs.files_exists == 'true')
      uses: actions/upload-artifact@a8a3f3ad30e3422c9c7b888a15615d19a852ae32
      id: upload_crash_dumps
      with:
        name: Crash-Dumps-${{env.NAME}}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}
        path: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        retention-days: 5

    - name: Perform CodeQL Analysis
      if: inputs.build_codeql == true && steps.skip_check.outputs.should_skip != 'true'
      uses: github/codeql-action/analyze@cdcdbb579706841c47f7063dda365e292e5cad7a
