# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow executes a single test, optionally gathering code coverage and logs.

name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      # The test command to invoke.
      test_command:
        required: true
        type: string
      # The name of the build artifact to download.
      build_artifact:
        required: true
        type: string
      # The environment to run this test on.
      environment:
        description: 'Environment to run tests on'
        type: string
        required: true
      # Set to true to gather code coverage when this test runs.
      code_coverage:
        required: false
        type: boolean
      # Set to true to gather and upload memory dumps if a test process crashes.
      gather_dumps:
        required: false
        type: boolean
      pre_test:
        required: false
        type: string
      post_test:
        required: false
        type: string
      capture_etw:
        required: false
        type: boolean
      # Set to true to use Visual Studio Developer command shell.
      vs_dev:
        required: false
        type: boolean
      fault_injection:
        required: false
        type: boolean
      leak_detection:
        required: false
        type: boolean
      configurations:
        required: false
        type: string
        default: '["Debug", "Release"]'

permissions:
  checks: read  # Required by fountainhead/action-wait-for-check to wait for another GitHub check to complete.
  contents: read  # Required by actions/checkout to fetch code.
  issues: write # Required to create issues.

jobs:
  run_test:
    timeout-minutes: 60

    strategy:
      matrix:
        configurations: ${{ fromJSON(inputs.configurations) }}
    runs-on: ${{inputs.environment}}
    env:
      # Configuration type to build.
      SOURCE_ROOT: ${{github.workspace}}
      NAME: ${{inputs.name}}
      BUILD_CONFIGURATION: ${{matrix.configurations}}
      BUILD_PLATFORM: x64
      TEST_COMMAND: ${{inputs.test_command}}
      PRE_COMMAND: ${{inputs.pre_test}}
      POST_COMMAND: ${{inputs.post_test}}
      EBPF_MEMORY_LEAK_DETECTION: ${{inputs.leak_detection}}

    # Checking out the branch is needed to gather correct code coverage data.
    steps:
    - id: skip_check
      uses: fkirc/skip-duplicate-actions@12aca0a884f6137d619d6a8a09fcc3406ced5281 # v5.3.0
      with:
        cancel_others: 'false'
        paths_ignore: '["**.md", "**/docs/**"]'

    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
      # Only check out source code if code coverage is being gathered.
      if: (inputs.code_coverage == true) && (steps.skip_check.outputs.should_skip != 'true')
      with:
        submodules: 'recursive'
        ref: ${{ github.event.workflow_run.head_branch }}

    # Perform shallow checkout for self-hosted runner.
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab
      if: (inputs.environment == 'ebpf_cicd_tests') && (steps.skip_check.outputs.should_skip != 'true')
      with:
        ref: ${{ github.event.workflow_run.head_branch }}

    - name: Set up OpenCppCoverage and add to PATH
      id: set_up_opencppcoverage
      if: (inputs.code_coverage == true) && (inputs.environment != 'ebpf_cicd_tests') && (steps.skip_check.outputs.should_skip != 'true')
      run: |
        choco install -y --requirechecksum=true --checksum=2295A733DA39412C61E4F478677519DD0BB1893D88313CE56B468C9E50517888 --checksum-type=sha256 OpenCppCoverage
        echo "C:\Program Files\OpenCppCoverage" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure Windows Error Reporting to make a local copy of any crashes that occur.
      id: configure_windows_error_reporting
      if: (inputs.gather_dumps == true) && (steps.skip_check.outputs.should_skip != 'true')
      run: |
        mkdir c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        New-Item -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -ErrorAction SilentlyContinue
        New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpType" -Value 2 -PropertyType DWord -ErrorAction SilentlyContinue
        New-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps" -Name "DumpFolder" -Value "c:\dumps\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}" -PropertyType ExpandString -ErrorAction SilentlyContinue

    - name: Remove existing artifacts
      if: (inputs.environment == 'ebpf_cicd_tests') && (steps.skip_check.outputs.should_skip != 'true')
      run: |
        Remove-Item -Path ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download build artifact
      if: (steps.skip_check.outputs.should_skip != 'true') && success()
      uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a
      id: download_artifact
      with:
        name: ${{inputs.build_artifact}}-${{matrix.configurations}}
        path: ${{github.workspace}}

    - name: Extract build artifact
      if: steps.skip_check.outputs.should_skip != 'true'
      working-directory: ${{github.workspace}}
      run: |
        mkdir ${{env.BUILD_PLATFORM}}
        Expand-Archive .\build-${{ matrix.configurations }}.zip -DestinationPath .\${{env.BUILD_PLATFORM}}

    - name: Create generated artifact folder
      if: (steps.skip_check.outputs.should_skip != 'true')
      run: |
        mkdir ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\Artifacts

    - name: Start ETW tracing
      id: start_etw_tracing
      if: (inputs.capture_etw == true) && (steps.skip_check.outputs.should_skip != 'true')
      shell: cmd
      run: |
        mkdir ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\TestLogs
        wpr.exe -start ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\ebpfforwindows.wprp -filemode

    - name: Configure eBPF store
      if: steps.skip_check.outputs.should_skip != 'true'
      id: configure_ebpf_store
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: |
        .\export_program_info.exe --clear
        .\export_program_info.exe

    - name: Run pre test command
      if: steps.skip_check.outputs.should_skip != 'true'
      id: run_pre_test_command
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: |
        ${{env.PRE_COMMAND}}

    # TODO: Clean up the combination of options: https://github.com/microsoft/ebpf-for-windows/issues/1590
    - name: Run test with Code Coverage in VS Dev environment
      if: (inputs.code_coverage == true) && (inputs.vs_dev == true) && (steps.skip_check.outputs.should_skip != 'true')
      id: run_test_with_code_coverage_in_vs_dev
      shell: cmd
      run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat"
          set EBPF_ENABLE_WER_REPORT=yes
          OpenCppCoverage.exe -q --cover_children --sources %CD% --excluded_sources %CD%\external\Catch2 --export_type cobertura:ebpf_for_windows.xml --working_dir ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -- ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\${{env.TEST_COMMAND}}

    - name: Run test with Code Coverage and low resource simulation
      if: (inputs.code_coverage == true) && (inputs.fault_injection == true) && (steps.skip_check.outputs.should_skip != 'true')
      id: run_test_with_code_coverage_in_fault_injection
      shell: cmd
      run: |
          set EBPF_ENABLE_WER_REPORT=yes
          OpenCppCoverage.exe -q --cover_children --sources %CD% --excluded_sources %CD%\external\Catch2 --export_type cobertura:ebpf_for_windows.xml --working_dir ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -- powershell.exe .\Test-FaultInjection.ps1 ${{env.TEST_COMMAND}} 4

    - name: Run test with low resource simulation
      if: (inputs.code_coverage != true) && (inputs.fault_injection == true) && (steps.skip_check.outputs.should_skip != 'true')
      id: run_test_with_fault_injection
      shell: cmd
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: |
          set EBPF_ENABLE_WER_REPORT=yes
          powershell.exe .\Test-FaultInjection.ps1 ${{env.TEST_COMMAND}} 16

    - name: Run test with Code Coverage
      if: (inputs.code_coverage == true) && (inputs.vs_dev != true) && (inputs.fault_injection != true) && (steps.skip_check.outputs.should_skip != 'true')
      id: run_test_with_code_coverage
      shell: cmd
      run: |
          set EBPF_ENABLE_WER_REPORT=yes
          OpenCppCoverage.exe -q --sources %CD% --excluded_sources %CD%\external\Catch2 --export_type cobertura:ebpf_for_windows.xml --working_dir ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -- ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\${{env.TEST_COMMAND}}

    - name: Run test without Code Coverage
      if: (inputs.code_coverage == false) && (steps.skip_check.outputs.should_skip != 'true')
      id: run_test_without_code_coverage
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: |
        ${{env.TEST_COMMAND}}

    - name: Run post test command
      # Run the post test command even if the workflow has failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true')
      id: run_post_test_command
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      run: |
        ${{env.POST_COMMAND}}

    - name: Check for CodeCoverage
      if: steps.skip_check.outputs.should_skip != 'true'
      uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
      id: check_coverage
      with:
        files: ebpf_for_windows.xml

    - name: Upload Report to Codecov attempt 1
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.check_coverage.outputs.files_exists == 'true')
      uses: codecov/codecov-action@894ff025c7b54547a9a2a1e9f228beae737ad3c2
      id: upload_code_coverage_report_1
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Wait on failure 1
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.upload_code_coverage_report_1.outcome == 'failure')
      run: Start-Sleep -Seconds 30

    - name: Upload Report to Codecov attempt 2
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.upload_code_coverage_report_1.outcome == 'failure')
      uses: codecov/codecov-action@894ff025c7b54547a9a2a1e9f228beae737ad3c2
      id: upload_code_coverage_report_2
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Wait on failure 2
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.upload_code_coverage_report_2.outcome == 'failure')
      run: Start-Sleep -Seconds 60

    - name: Upload Report to Codecov attempt 3
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.upload_code_coverage_report_2.outcome == 'failure')
      uses: codecov/codecov-action@894ff025c7b54547a9a2a1e9f228beae737ad3c2
      id: upload_code_coverage_report_3
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Wait on failure 3
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.upload_code_coverage_report_3.outcome == 'failure')
      run: Start-Sleep -Seconds 120

    - name: Upload Report to Codecov attempt 4
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.upload_code_coverage_report_3.outcome == 'failure')
      uses: codecov/codecov-action@894ff025c7b54547a9a2a1e9f228beae737ad3c2
      id: upload_code_coverage_report_4
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Fail if code coverage upload fails
      if: (steps.skip_check.outputs.should_skip != 'true')
      run: |
        if ($${{ steps.test.upload_code_coverage_report_1!='failure' }}) { exit 0 }
        if ($${{ steps.test.upload_code_coverage_report_2!='failure' }}) { exit 0 }
        if ($${{ steps.test.upload_code_coverage_report_3!='failure' }}) { exit 0 }
        if ($${{ steps.test.upload_code_coverage_report_4!='failure' }}) { exit 0 }
        exit 1

    - name: Stop ETW tracing
      id: stop_etw_tracing
      if: (inputs.capture_etw == true) && (steps.skip_check.outputs.should_skip != 'true')
      shell: cmd
      run: wpr.exe -stop ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\TestLogs\ebpfforwindows.etl

    - name: Copy any bpf2c test logs to TestLogs
      if: (inputs.name == 'bpf2c') && (inputs.capture_etw == true) && (steps.skip_check.outputs.should_skip != 'true')
      shell: cmd
      run: |
          copy ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\*.log ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\TestLogs

    - name: Check for crash dumps
      # Check for crash dumps even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true')
      uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
      id: check_dumps
      with:
        files: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/*.dmp

    - name: Upload any crash dumps
      # Upload crash dumps even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true') && (steps.check_dumps.outputs.files_exists == 'true') && (inputs.gather_dumps == true)
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      id: upload_crash_dumps
      with:
        name: Crash-Dumps-${{env.NAME}}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}
        path: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        retention-days: 5

    - name: Check for TestLogs
      # Check for test logs even if the workflow failed.
      uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true')
      id: check_logs
      with:
        files: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/TestLogs/*

    - name: Upload log files
      # Upload test logs even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true') && (steps.check_logs.outputs.files_exists == 'true')
      id: upload_logs
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      with:
        name: Test-Logs-${{env.NAME}}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}
        path: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/TestLogs
        retention-days: 5

    - name: Check for generated artifacts
      # Check for artifacts even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true')
      uses: andstor/file-existence-action@20b4d2e596410855db8f9ca21e96fbe18e12930b
      id: check_artifacts
      with:
        files: ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\Artifacts\*

    - name: Upload generated artifacts
      # Upload artifacts even if the workflow failed.
      if: (success() || failure()) && (steps.skip_check.outputs.should_skip != 'true') && (steps.check_artifacts.outputs.files_exists == 'true')
      id: upload_artifacts
      uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce
      with:
        name: Artifacts-${{env.NAME}}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}
        path: ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\Artifacts
        retention-days: 5

    - name: Mark run as failed if crash dumps are found
      if: (steps.skip_check.outputs.should_skip != 'true') && (steps.check_dumps.outputs.files_exists == 'true')
      run: exit 1

  create_or_update_issue:
    needs: run_test
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Harden Runner
        uses: step-security/harden-runner@6b3083af2869dc3314a0257a42f4af696cc79ba3 # v2.3.1
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443

      - id: skip_check
        uses: fkirc/skip-duplicate-actions@12aca0a884f6137d619d6a8a09fcc3406ced5281 # v5.3.0
        with:
          cancel_others: 'false'
          paths_ignore: '["**.md", "**/docs/**"]'

      - uses: actions/github-script@d7906e4ad0b1822421a7e6a35d5ca353c962f410
        if: (github.event_name == 'schedule') || (github.event_name == 'push') && (steps.skip_check.outputs.should_skip != 'true')
        env:
          TITLE: Workflow failed - ${{inputs.name}}
          BODY: |
            [Failed Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            [Codebase](https://github.com/${{ github.repository }}/tree/${{ github.sha }})
            Test name - `${{ inputs.name }}`
          LABELS: bug,ci/cd

        with:
          script: |
            const owner = process.env.GITHUB_REPOSITORY.split('/')[0]
            const repo = process.env.GITHUB_REPOSITORY.split('/')[1]
            const body = process.env.BODY;
            const title = process.env.TITLE;
            const labels = process.env.LABELS;
            const label_array = labels ? labels.split(',') : [];
            console.log(label_array);
            // Get all issues that have these labels.
            const opts = github.rest.issues.listForRepo.endpoint.merge({
              ...context.issue,
              state: 'open',
              labels: label_array,
            });
            const issues = await github.paginate(opts);
            // Look for an existing issue with the same title.
            for (const issue of issues) {
              if (issue.title === title) {
                console.log(`Updating issue ${title}`);
                await github.rest.issues.createComment({
                  issue_number: issue.number,
                  owner,
                  repo,
                  body,
                });
                return;
              }
            }
            // Existing issue not found, create a new one.
            console.log(`Creating issue ${title}`);
            await github.rest.issues.create({
              owner: owner,
              repo: repo,
              title: title,
              body: body,
              labels: label_array,
            });
