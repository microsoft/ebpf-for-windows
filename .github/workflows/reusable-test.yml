# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow executes a single test, optionally gathering code coverage and logs.

name: Reusable Test Workflow

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      # The test command to invoke.
      test_command:
        required: true
        type: string
      # The name of the build job to wait for.
      build_job:
        required: true
        type: string
      # The name of the build artifact to download.
      build_artifact:
        required: true
        type: string
      # The environment to run this test on.
      environment:
        description: 'Environment to run tests on'
        type: string
        required: true
      # Set to true to gather code coverage when this test runs.
      code_coverage:
        required: false
        type: boolean
      # Set to true to gather and upload memory dumps if a test process crashes.
      gather_dumps:
        required: false
        type: boolean
      pre_test:
        required: false
        type: string
      post_test:
        required: false
        type: string

permissions:
  checks: read  # Required by fountainhead/action-wait-for-check to wait for another GitHub check to complete.
  contents: read  # Required by actions/checkout to fetch code.

jobs:
  run_test:
    timeout-minutes: 30

    strategy:
      matrix:
        configurations: [Debug, Release]
    runs-on: ${{inputs.environment}}
    env:
      # Configuration type to build.
      NAME: ${{inputs.name}}
      BUILD_CONFIGURATION: ${{matrix.configurations}}
      BUILD_PLATFORM: x64
      TEST_COMMAND: ${{inputs.test_command}}
      PRE_COMMAND: ${{inputs.pre_test}}
      POST_COMMAND: ${{inputs.post_test}}

    # Checking out the branch is needed to gather correct code coverage data.
    steps:
    - uses: actions/checkout@b0e28b5ac45a892f91e7d036f8200cf5ed489415
      # Only check out source code if code coverage is being gathered.
      if: inputs.code_coverage == true
      with:
        submodules: 'recursive'
        ref: ${{ github.event.workflow_run.head_branch }}

    # Perform shallow checkout for self-hosted runner.
    - uses: actions/checkout@b0e28b5ac45a892f91e7d036f8200cf5ed489415
      if: inputs.environment == 'ebpf_cicd_tests'
      with:
        ref: ${{ github.event.workflow_run.head_branch }}

    - name: Set up OpenCppCoverage and add to PATH
      id: set_up_opencppcoverage
      if: (inputs.code_coverage == true) && (inputs.environment != 'ebpf_cicd_tests')
      run: |
        choco install -y --requirechecksum=true --checksum=2295A733DA39412C61E4F478677519DD0BB1893D88313CE56B468C9E50517888 --checksum-type=sha256 OpenCppCoverage
        echo "C:\Program Files\OpenCppCoverage" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Set up ProcDump and add to PATH
      id: set_up_procdump
      if: inputs.gather_dumps == true
      run: |
        choco install -y procdump
        echo "C:\Program Files\ProcDump" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        mkdir c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        cd c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        echo "test" > c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/test.txt
        procdump64.exe -accepteula -i -r -ma

    - name: Wait for build to succeed
      uses: fountainhead/action-wait-for-check@507b029e31edbe1a72d4de429476e1f4efe98869
      id: wait_for_build
      with:
        timeoutSeconds: 1500
        intervalSeconds: 30
        token: ${{secrets.GITHUB_TOKEN}}
        checkName: ${{inputs.build_job}} (${{env.BUILD_CONFIGURATION}})
        ref: ${{ github.event.pull_request.head.sha || github.sha }}

    - name: Remove existing artifacts
      if: inputs.environment == 'ebpf_cicd_tests'
      run: |
        Remove-Item -Path ${{github.workspace}}\${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -Recurse -Force -ErrorAction SilentlyContinue

    - name: Download build artifact
      if: success()
      uses: actions/download-artifact@fb598a63ae348fa914e94cd0ff38f362e927b741
      id: download_artifact
      with:
        name: ${{inputs.build_artifact}} ${{matrix.configurations}}
        path: ${{github.workspace}}/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}

    - name: Run test with Code Coverage
      if: inputs.code_coverage == true
      id: run_test_with_code_coverage
      shell: cmd
      run: |
        ${{env.PRE_COMMAND}}
        OpenCppCoverage.exe --sources %CD% --excluded_sources %CD%\external\Catch2 --export_type cobertura:ebpf_for_windows.xml --working_dir ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}} -- ${{env.BUILD_PLATFORM}}\${{env.BUILD_CONFIGURATION}}\${{env.TEST_COMMAND}}
        ${{env.POST_COMMAND}}

    - name: Run test without Code Coverage
      if: inputs.code_coverage == false
      id: run_test_without_code_coverage
      working-directory: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      shell: cmd
      run: |
        ${{env.PRE_COMMAND}}
        ${{env.TEST_COMMAND}}
        ${{env.POST_COMMAND}}

    - name: Check for CodeCoverage
      uses: andstor/file-existence-action@f02338908d150e00a4b8bebc2dad18bd9e5229b0
      id: check_coverage
      with:
        files: ebpf_for_windows.xml

    - name: Upload Report to Codecov attempt 1
      if: steps.check_coverage.outputs.files_exists == 'true'
      uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378
      id: upload_code_coverage_report_1
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Wait on failure 1
      if: steps.upload_code_coverage_report_1.outcome == 'failure'
      run: Start-Sleep -Seconds 30

    - name: Upload Report to Codecov attempt 2
      if: steps.upload_code_coverage_report_1.outcome == 'failure'
      uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378
      id: upload_code_coverage_report_2
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Wait on failure 2
      if: steps.upload_code_coverage_report_2.outcome == 'failure'
      run: Start-Sleep -Seconds 60

    - name: Upload Report to Codecov attempt 3
      if: steps.upload_code_coverage_report_2.outcome == 'failure'
      uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378
      id: upload_code_coverage_report_3
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Wait on failure 3
      if: steps.upload_code_coverage_report_3.outcome == 'failure'
      run: Start-Sleep -Seconds 120

    - name: Upload Report to Codecov attempt 4
      if: steps.upload_code_coverage_report_3.outcome == 'failure'
      uses: codecov/codecov-action@81cd2dc8148241f03f5839d295e000b8f761e378
      id: upload_code_coverage_report_4
      continue-on-error: true
      with:
        files: ebpf_for_windows.xml
        fail_ci_if_error: true
        functionalities: fix
        root_dir: ${{github.workspace}}

    - name: Fail if code coverage upload fails
      if: always()
      run: |
        if ($${{ steps.test.upload_code_coverage_report_1!='failure' }}) { exit 0 }
        if ($${{ steps.test.upload_code_coverage_report_2!='failure' }}) { exit 0 }
        if ($${{ steps.test.upload_code_coverage_report_3!='failure' }}) { exit 0 }
        if ($${{ steps.test.upload_code_coverage_report_4!='failure' }}) { exit 0 }
        exit 1

    - name: Check for crash dumps
      if: inputs.gather_dumps == true
      working-directory: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
      id: check_for_crash_dumps
      run: if (Test-Path *.dmp) { exit 1 }

    - name: Upload any crash dumps
      if: failure()
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
      id: upload_crash_dumps
      with:
        name: Crash-Dumps-${{env.NAME}}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}
        path: c:/dumps/${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}
        retention-days: 5

    - name: Check for TestLogs
      uses: andstor/file-existence-action@f02338908d150e00a4b8bebc2dad18bd9e5229b0
      id: check_logs
      with:
        files: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/TestLogs/*

    - name: Upload log files
      if: steps.check_logs.outputs.files_exists == 'true'
      id: upload_logs
      uses: actions/upload-artifact@6673cd052c4cd6fcf4b4e6e60ea986c889389535
      with:
        name: Test-Logs-${{env.NAME}}-${{env.BUILD_PLATFORM}}-${{env.BUILD_CONFIGURATION}}
        path: ./${{env.BUILD_PLATFORM}}/${{env.BUILD_CONFIGURATION}}/TestLogs
        retention-days: 5
