# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow performs a build of the project and uploads the result as a build artifact.

parameters:
  # Name associated with the output of this build.
  - name: build_artifact
    type: string
  # Name of the job
  - name: name
    type: string
  # Additional options passed to msbuild.
  - name: build_options
    type: string
    default: ''
  - name: generate_release_package
    type: boolean
    default: false
  - name: build_codeql
    type: boolean
    default: false
  - name: build_msi
    type: boolean
    default: false
  - name: build_nuget
    type: boolean
    default: false
  - name: cxx_flags
    type: string
    default: ''
  - name: ld_flags
    type: string
    default: ''
  - name: configurations
    type: object
    default: ["Debug", "Release"]


jobs:
  - job: '${{parameters.name}}'
    timeoutInMinutes: 90

    strategy:
      matrix:
        ${{ each configuration in parameters.configurations }}:
          ${{ configuration }}:
            buildConfiguration: ${{ configuration }}

    pool:
      vmImage: 'windows-2022'
      type: windows

    variables:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: ebpf-for-windows.sln
      BUILD_ARTIFACT_NAME: ${{parameters.build_artifact}}
      BUILD_CONFIGURATION: $(buildConfiguration)
      BUILD_PLATFORM: x64
      BUILD_OPTIONS: ${{parameters.build_options}}
      CXX_FLAGS: ${{parameters.cxx_flags}}
      LD_FLAGS: ${{parameters.ld_flags}}
      MSBUILD_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64'
      VSVARS64_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build'
      GDN_CODESIGN_TARGETDIRECTORY: '$(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)'

    steps:
      - script: |
          call "$(VSVARS64_PATH)\vcvars64.bat"
          echo "##vso[task.setvariable variable=msvc_tools_path;isOutput=true]%VCToolsInstallDir%"
          echo "##vso[task.setvariable variable=msvc_tools_version;isOutput=true]%VCToolsVersion%"
        name: msvc_variables
        displayName: 'Set MSVC Environment Variables'

      - powershell: |
          $value = "true"
          Write-Host "##vso[task.setvariable variable=ASAN_WIN_CONTINUE_ON_INTERCEPTION_FAILURE;]$value"
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Set ASAN_WIN_CONTINUE_ON_INTERCEPTION_FAILURE'

      - checkout: self
        displayName: 'Checkout Repo'
        submodules: 'recursive'
        fetchDepth: 0

      - bash: |
          echo "*** All environment variables ***"
          env | sort
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Dump Environment variables'

      - script: |
          echo ##vso[task.prependpath]C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\llvm\bin
        displayName: 'Set path'

      - task: PowerShell@2
        displayName: 'Log CLANG version'
        inputs:
          targetType: 'inline'
          script: |
            clang --version

      - powershell: |
          .\scripts\initialize_ebpf_repo.ps1
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Configuring repo for first build'

      - script: |
          "$(MSBUILD_PATH)\msbuild.exe" /m /p:Configuration=$(BUILD_CONFIGURATION) /p:Platform=$(BUILD_PLATFORM) $(SOLUTION_FILE_PATH) $(BUILD_OPTIONS)
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Build'

      - script: |
          copy "$(msvc_variables.msvc_tools_path)\bin\Hostx64\x64\clang*"" .
        workingDirectory: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)
        displayName: 'Copy LLVM libs for Fuzzing & Address Sanitizing'

      - powershell: |
          Invoke-WebRequest https://github.com/microsoft/ebpf-for-windows-demo/releases/download/v0.0.2/$(BUILD_PLATFORM)-Debug-cilium-xdp.zip -OutFile x64-$(BUILD_CONFIGURATION)-cilium-xdp.zip
        workingDirectory: $(Build.SourcesDirectory)
        condition: or(eq(variables.buildConfiguration, 'Debug'), eq(variables.buildConfiguration, 'NativeOnlyDebug'))
        displayName: 'Download demo Debug repository'

      - powershell: |
          Invoke-WebRequest https://github.com/microsoft/ebpf-for-windows-demo/releases/download/v0.0.2/$(BUILD_PLATFORM)-Release-cilium-xdp.zip -OutFile x64-$(BUILD_CONFIGURATION)-cilium-xdp.zip
        workingDirectory: $(Build.SourcesDirectory)
        condition: or(eq(variables.buildConfiguration, 'Release'), eq(variables.buildConfiguration, 'NativeOnlyRelease'))
        displayName: 'Download demo Release repository'

      - script: |
          tar -xf ..\..\x64-$(BUILD_CONFIGURATION)-cilium-xdp.zip
        workingDirectory: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)
        condition: ne(variables.buildConfiguration, 'FuzzerDebug')
        displayName: 'Extract artifacts to build path'

      - publish: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)
        artifact: "${{parameters.build_artifact}} $(buildConfiguration)"
        displayName: 'Upload Build Output'

      - publish: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)/ebpf-for-windows.msi
        artifact: "ebpf-for-windows - MSI installer (${{parameters.build_artifact}}_$(buildConfiguration))"
        condition: and(eq('${{parameters.build_msi}}', 'true'), ne(variables.buildConfiguration, 'FuzzerDebug'))
        displayName: 'Upload the MSI installer'

      # Locate and upload the VM Extension package
      - bash: |
          echo "##vso[task.setvariable variable=REL_VM_EXTENSION_PACKAGE_PATH;isOutput=true]$(ls $(BUILD_PLATFORM)/$(BUILD_CONFIGURATION)/Microsoft.EbpfForWindows.EbpfForWindows.*.zip)"
        condition: eq(variables.buildConfiguration, 'NativeOnlyRelease')
        name: vm_extension_package
        displayName: 'Locate the VM Extension package'

      - publish: $(vm_extension_package.REL_VM_EXTENSION_PACKAGE_PATH)
        artifact: "ebpf-for-windows - VM Extension package (${{parameters.build_artifact}}_$(buildConfiguration))"
        condition: eq(variables.buildConfiguration, 'NativeOnlyRelease')
        displayName: 'Upload the VM Extension package'

      # Locate and upload the Redist NuGet package
      - bash: |
          echo "##vso[task.setvariable variable=REL_REDIST_NUGET_PACKAGE_PATH;isOutput=true]$(ls $(BUILD_PLATFORM)/$(BUILD_CONFIGURATION)/eBPF-for-Windows-Redist.*.nupkg)"
        condition: eq(variables.buildConfiguration, 'NativeOnlyRelease')
        name: redist_nuget_package
        displayName: 'Locate the Redist NuGet package'

      - publish: $(redist_nuget_package.REL_REDIST_NUGET_PACKAGE_PATH)
        artifact: "ebpf-for-windows - Redist package (${{parameters.build_artifact}}_$(buildConfiguration))"
        condition: eq(variables.buildConfiguration, 'NativeOnlyRelease')
        displayName: 'Upload the Redist NuGet package'

      # Build, locate and upload the development NuGet package
      - script: |
          "$(MSBUILD_PATH)\msbuild.exe" /m /p:Configuration="$(BUILD_CONFIGURATION)" /p:Platform="$(BUILD_PLATFORM)" "$(SOLUTION_FILE_PATH)" "$(BUILD_OPTIONS)" /t:tools\nuget
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'))
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Build the development NuGet package'

      - bash: |
          echo "##vso[task.setvariable variable=REL_NUGET_PACKAGE_PATH;isOutput=true]$(ls $(BUILD_PLATFORM)/$(BUILD_CONFIGURATION)/eBPF-for-Windows.*.nupkg)"
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'))
        name: nuget_package
        displayName: 'Locate the development NuGet package'

      - publish: $(nuget_package.REL_NUGET_PACKAGE_PATH)
        artifact: 'ebpf-for-windows nuget'
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'), eq('${{parameters.build_artifact}}', 'Build-x64'))
        displayName: 'Upload the development NuGet package'

      - publish: $(nuget_package.REL_NUGET_PACKAGE_PATH)
        artifact: 'ebpf-for-windows-native nuget'
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'), eq('${{parameters.build_artifact}}', 'Build-x64-native-only'))
        displayName: 'Upload the development NuGet package'

      - powershell: |
          .\scripts\onebranch\onefuzz-prep.ps1 -BuildPath $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration) -OneFuzzDirectory $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/onefuzz -OneFuzzConfigFile $(Build.SourcesDirectory)/.onefuzz/OneFuzzConfig.json
        condition: eq(variables.buildConfiguration, 'FuzzerDebug')
        displayName: 'Prepare OneFuzz directory'

      - task: onefuzz-task@0
        condition: eq(variables.buildConfiguration, 'FuzzerDebug')
        inputs:
          onefuzzOSes: 'windows'
        env:
          onefuzzDropDirectory: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/onefuzz
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)