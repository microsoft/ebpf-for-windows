# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

# This workflow performs a build of the project and uploads the result as a build artifact.

parameters:
  # Name associated with the output of this build.
  - name: build_artifact
    type: string
  # Name of the job
  - name: name
    type: string
  # Additional options passed to msbuild.
  - name: build_options
    type: string
    default: ''
  - name: generate_release_package
    type: boolean
    default: false
  - name: build_codeql
    type: boolean
    default: false
  - name: build_nuget
    type: boolean
    default: false
  - name: cxx_flags
    type: string
    default: ''
  - name: ld_flags
    type: string
    default: ''


jobs:
  - job: '${{parameters.name}}'
    timeoutInMinutes: 90

    strategy:
      matrix:
        Debug:
          buildConfiguration: 'Debug'
        Release:
          buildConfiguration: 'Release'
      maxParallel: 2

    pool:
      vmImage: 'windows-2022'
      type: windows

    variables:
      # Path to the solution file relative to the root of the project.
      SOLUTION_FILE_PATH: ebpf-for-windows.sln
      BUILD_ARTIFACT_NAME: ${{parameters.build_artifact}}
      BUILD_CONFIGURATION: $(buildConfiguration)
      BUILD_PLATFORM: x64
      BUILD_OPTIONS: ${{parameters.build_options}}
      CXX_FLAGS: ${{parameters.cxx_flags}}
      LD_FLAGS: ${{parameters.ld_flags}}
      MSBUILD_PATH: 'C:\Program Files\Microsoft Visual Studio\2022\Enterprise\MSBuild\Current\Bin\amd64'
      GDN_CODESIGN_TARGETDIRECTORY: '$(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)'

    steps:
      - checkout: self
        displayName: 'Checkout Repo'
        submodules: 'recursive'
        fetchDepth: 0

      - bash: |
          echo "*** All environment variables ***"
          env | sort
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Dump Environment variables'

      - bash: |
          choco install -y llvm --version 11.0.1 --allow-downgrade
          echo '##vso[task.prependpath]C:\Program Files\LLVM\bin'
          choco install wixtoolset
        workingDirectory: $(Build.SourcesDirectory)
        displayName:  'Install tools'

      - task: NuGetCommand@2
        inputs:
          command: 'restore'
          restoreSolution: $(SOLUTION_FILE_PATH)
        displayName: 'Restore Nuget Packages'

      - bash: |
          cmake -G "Visual Studio 17 2022" -S external/ebpf-verifier -B external/ebpf-verifier/build
        env:
          CXXFLAGS: '$(CXX_FLAGS) /ZH:SHA_256'
          LDFLAGS: $(LD_FLAGS)
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Create verifier project'

      - bash: |
          cmake -G "Visual Studio 17 2022" -S external/catch2 -B external/catch2/build -DBUILD_TESTING=OFF
        env:
          CXXFLAGS: '$(CXX_FLAGS) /ZH:SHA_256'
          LDFLAGS: $(LD_FLAGS)
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Create catch2 project'

      - bash: |
          cmake -G "Visual Studio 17 2022" -S external/ubpf -B external/ubpf/build
        env:
          CXXFLAGS: '$(CXX_FLAGS) /ZH:SHA_256'
          LDFLAGS: $(LD_FLAGS)
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Create ubpf project'

      - script: |
          "$(MSBUILD_PATH)\msbuild.exe" /m /p:Configuration=$(BUILD_CONFIGURATION) /p:Platform=$(BUILD_PLATFORM) $(SOLUTION_FILE_PATH) $(BUILD_OPTIONS)
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Build'

      - script: |
          copy "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.34.31933\bin\Hostx64\x64\clang*" .
        workingDirectory: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)
        displayName: 'Copy LLVM libs for Fuzzing & Address Sanitizing'

      - powershell: |
          Invoke-WebRequest https://github.com/microsoft/ebpf-for-windows-demo/releases/download/v0.0.1/$(BUILD_PLATFORM)-$(BUILD_CONFIGURATION)-cilium-xdp.zip -OutFile x64-$(BUILD_CONFIGURATION)-cilium-xdp.zip
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Download demo repository'

      - script: |
          tar -xf ..\..\x64-$(BUILD_CONFIGURATION)-cilium-xdp.zip
        workingDirectory: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)
        displayName: 'Extract artifacts to build path'

      - publish: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)
        artifact: "${{parameters.build_artifact}} $(buildConfiguration)"
        displayName: 'Upload Build Output'

      - publish: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)/ebpf-for-windows.msi
        artifact: "ebpf-for-windows MSI installer $(buildConfiguration)"
        condition: and(eq('${{parameters.build_artifact}}', 'Build-x64'), eq(variables.buildConfiguration, 'Debug'))
        displayName: 'Upload the MSI package (Debug)'

      - publish: $(Build.SourcesDirectory)/$(BUILD_PLATFORM)/$(buildConfiguration)/ebpf-for-windows.msi
        artifact: "ebpf-for-windows MSI installer $(buildConfiguration)"
        condition: and(eq('${{parameters.build_artifact}}', 'Build-x64'), eq(variables.buildConfiguration, 'Release'))
        displayName: 'Upload the MSI package (Release)'

      - script: |
          "$(MSBUILD_PATH)\msbuild.exe" /m /p:Configuration="$(BUILD_CONFIGURATION)" /p:Platform="$(BUILD_PLATFORM)" "$(SOLUTION_FILE_PATH)" "$(BUILD_OPTIONS)" /t:tools\nuget
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'))
        workingDirectory: $(Build.SourcesDirectory)
        displayName: 'Build nuget package'

      - bash: |
          echo "##vso[task.setvariable variable=REL_NUGET_PACKAGE_PATH;isOutput=true]$(ls $(BUILD_PLATFORM)/$(BUILD_CONFIGURATION)/*.nupkg)"
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'))
        name: nuget_packages
        displayName: 'Locate the nuget package'

      - publish: $(nuget_packages.REL_NUGET_PACKAGE_PATH)
        artifact: 'ebpf-for-windows nuget'
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'), eq('${{parameters.build_artifact}}', 'Build-x64'))
        displayName: 'Upload the nuget package'

      - publish: $(nuget_packages.REL_NUGET_PACKAGE_PATH)
        artifact: 'ebpf-for-windows-native nuget'
        condition: and(eq(variables.buildConfiguration, 'Release'), eq('${{parameters.build_nuget}}', 'true'), eq('${{parameters.build_artifact}}', 'Build-x64-native-only'))
        displayName: 'Upload the nuget package'