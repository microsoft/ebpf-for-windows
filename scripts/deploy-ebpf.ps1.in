# Copyright (c) Microsoft Corporation
# SPDX-License-Identifier: MIT

##
## Initialize parameters
##
$source_directory="."

# The following files should be installed on all platforms.
[System.Collections.ArrayList]$install_files = @(
    "ebpf-for-windows.msi"
    )

# The following files are only needed for testing and debugging.
[System.Collections.ArrayList]$built_test_files = @(
    "*.exe",
    "*.dll",
    "*.pdb",
    "*.o",
	"*.sys"
    )

$source_directory="$PSScriptRoot"
$destination_directory="C:\temp\eBPF"
$copy_file_list = $install_files
$vm="Windows 10 dev environment"
$vc_redist_path = Join-Path -Path $env:VCToolsRedistDir '\debug_nonredist\x64\Microsoft.VC143.DebugCRT\'
$copy_debug_redist = $false
$error.clear()

##
## Process command-line options
##
foreach ($arg in $args) {
    switch -regex ($arg) {
    { @("-h", "--help") -contains $_ }
        {
            Write-Host @'

OVERVIEW:

Copies eBPF framework files into a temp directory on the local machine or into a VM

    $ deploy-ebpf [-h] [-l[=path]] [-t] [--vm="..."]

OPTIONS:
    -h, --help     Print this help message.
    -l, --local    Copies files to the local temp directory instead of into a VM
    -t, --test     Includes files needed only for testing and debugging
    --vm           Specifies the VM name, which defaults to "Windows 10 dev environment"

'@
            exit 0
        }
    "--vm=*"
        {
            $vm=($arg -split "=")[1];
            break
        }
    "^(?:-l|--local)(?:=(.+))?$"
        {
            if ($matches[1]) {
                $destination_directory = $matches[1]
            }
            Clear-Variable -name vm
            break
        }
    { @("-t", "--test") -contains $_ }
        {
            $copy_file_list = $install_files + $built_test_files
            $copy_debug_redist = $true
            break
        }
    default
        {
            Write-Error "unknown option: $arg"
            exit 1
        }
    }
}

if ($null -eq $vm) {
   ##
   ## Copy files to a local temp directory
   ##
   if ($copy_debug_redist) {
      Write-Host "Copying the VC++ Redist (Debug) files from `"$vc_redist_path`" to `"$destination_directory`""
      $files = Get-ChildItem -Path $vc_redist_path -File
      foreach($file in $files) {
        $source_path = $file.FullName
        $destination_path = Join-Path -Path $destination_directory -ChildPath $file.Name
        $destination_full_directory = Split-Path $destination_path -Parent
        Write-Host " $source_path -> $destination_path"
        if (!(Test-Path $destination_full_directory)) {
          New-Item -Type Directory $destination_full_directory -ErrorAction Stop | Write-Verbose
        }
        Copy-Item -Path $source_path -Destination $destination_path -ErrorAction Stop
      }
   }
   Write-Host "Copying files from `"$source_directory`" to `"$destination_directory`""
   foreach($file in $copy_file_list) {
      $source_path = "$source_directory\$file"
      $destination_path = "$destination_directory\$file"
      $destination_full_directory = Split-Path $destination_path
      Write-Host " $source_path -> $destination_path"
      if (! (Test-Path $destination_full_directory)) {
         New-Item -Type Directory $destination_full_directory -ErrorAction Stop | Write-Verbose
      }
      Copy-Item "$source_path" -Destination "$destination_path" -ErrorAction Stop
   }
} else {
    ##
    ## Copy files to a VM
    ##
    $identity = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal $identity
    if (! $principal.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator)) {
        Write-Host "This command must be run as Administrator to deploy files into a VM"
        exit 1
    }
    Enable-VMIntegrationService -VMName $vm -Name "Guest Service Interface"
    if (! $?) {
        exit 1
    }
    if ($copy_debug_redist) {
        Write-Host "Copying the VC++ Redist (Debug) files from `"$vc_redist_path`" to `"$destination_directory`" in VM `"$vm`"..."
        $files = Get-ChildItem -Path $vc_redist_path -File
        foreach($file in $files) {
            $source_path = $file.FullName
            $destination_path = Join-Path -Path $destination_directory -ChildPath $file.Name
            Write-Host " $source_path -> $destination_path"
            Copy-VMFile "$vm" -SourcePath "$source_path" -DestinationPath "$destination_path" -CreateFullPath -FileSource Host -Force
            if (! $?) {
                exit 1
            }
        }
    }
    Write-Host "Copying files from `"$source_directory`" to `"$destination_directory`" in VM `"$vm`"..."
    foreach($file in $copy_file_list) {
        $source_path = "$source_directory\$file"
        $destination_path = "$destination_directory\$file"
        Write-Host " $source_path -> $destination_path"
        Copy-VMFile "$vm" -SourcePath "$source_path" -DestinationPath "$destination_path" -CreateFullPath -FileSource Host -Force
        if (! $?) {
            exit 1
        }
    }
}

exit 0