// Copyright (c) Microsoft Corporation
// SPDX-License-Identifier: MIT

/**
 * @brief Includes all required ASAN externs to link binaries that include ASAN instramented binaries
 * but don't enable ASAN themselves.
 * These binaries are not expected to work unless they are also compiled with ASAN
 * and link the proper ASAN libs.
 * For more information, see /docs/AddressSanitizing.md within this repository.
 **/

extern "C"
{
    void
    __asan_init()
    {}
    void
    __asan_version_mismatch_check()
    {}
    void
    __asan_register_image_globals()
    {}
    void
    __asan_unregister_image_globals()
    {}
    void
    __asan_register_elf_globals()
    {}
    void
    __asan_unregister_elf_globals()
    {}
    void
    __asan_register_globals()
    {}
    void
    __asan_unregister_globals()
    {}
    void
    __asan_before_dynamic_init()
    {}
    void
    __asan_after_dynamic_init()
    {}
    void
    __asan_set_shadow_00()
    {}
    void
    __asan_set_shadow_f1()
    {}
    void
    __asan_set_shadow_f2()
    {}
    void
    __asan_set_shadow_f3()
    {}
    void
    __asan_set_shadow_f5()
    {}
    void
    __asan_set_shadow_f8()
    {}
    void
    __asan_poison_stack_memory()
    {}
    void
    __asan_unpoison_stack_memory()
    {}
    void
    __asan_handle_no_return()
    {}
    void
    __asan_poison_memory_region()
    {}
    void
    __asan_unpoison_memory_region()
    {}
    void
    __asan_address_is_poisoned()
    {}
    void
    __asan_region_is_poisoned()
    {}
    void
    __asan_describe_address()
    {}
    void
    __asan_report_present()
    {}
    void
    __asan_get_report_pc()
    {}
    void
    __asan_get_report_bp()
    {}
    void
    __asan_get_report_sp()
    {}
    void
    __asan_get_report_address()
    {}
    void
    __asan_get_report_access_type()
    {}
    void
    __asan_get_report_access_size()
    {}
    void
    __asan_get_report_description()
    {}
    void
    __asan_locate_address()
    {}
    void
    __asan_get_alloc_stack()
    {}
    void
    __asan_get_free_stack()
    {}
    void
    __asan_get_shadow_mapping()
    {}
    void
    __asan_report_error()
    {}
    void
    __asan_set_death_callback()
    {}
    void
    __asan_set_error_report_callback()
    {}
    void
    __asan_on_error()
    {}
    void
    __asan_prvoid_accumulated_stats()
    {}
    void
    __asan_default_options()
    {}

    void* __asan_shadow_memory_dynamic_address = 0;
    int __asan_option_detect_stack_use_after_return = 0;
    int __asan_test_only_reported_buggy_povoider = 0;

    void
    __asan_load1()
    {}
    void
    __asan_load2()
    {}
    void
    __asan_load4()
    {}
    void
    __asan_load8()
    {}
    void
    __asan_load16()
    {}
    void
    __asan_store1()
    {}
    void
    __asan_store2()
    {}
    void
    __asan_store4()
    {}
    void
    __asan_store8()
    {}
    void
    __asan_store16()
    {}
    void
    __asan_loadN()
    {}
    void
    __asan_storeN()
    {}
    void
    __asan_load1_noabort()
    {}
    void
    __asan_load2_noabort()
    {}
    void
    __asan_load4_noabort()
    {}
    void
    __asan_load8_noabort()
    {}
    void
    __asan_load16_noabort()
    {}
    void
    __asan_store1_noabort()
    {}
    void
    __asan_store2_noabort()
    {}
    void
    __asan_store4_noabort()
    {}
    void
    __asan_store8_noabort()
    {}
    void
    __asan_store16_noabort()
    {}
    void
    __asan_loadN_noabort()
    {}
    void
    __asan_storeN_noabort()
    {}
    void
    __asan_exp_load1()
    {}
    void
    __asan_exp_load2()
    {}
    void
    __asan_exp_load4()
    {}
    void
    __asan_exp_load8()
    {}
    void
    __asan_exp_load16()
    {}
    void
    __asan_exp_store1()
    {}
    void
    __asan_exp_store2()
    {}
    void
    __asan_exp_store4()
    {}
    void
    __asan_exp_store8()
    {}
    void
    __asan_exp_store16()
    {}
    void
    __asan_exp_loadN()
    {}
    void
    __asan_exp_storeN()
    {}
    void
    __asan_memcpy()
    {}
    void
    __asan_memset()
    {}
    void
    __asan_memmove()
    {}
    void
    __asan_poison_cxx_array_cookie()
    {}
    void
    __asan_load_cxx_array_cookie()
    {}
    void
    __asan_poison_voidra_object_redzone()
    {}
    void
    __asan_unpoison_voidra_object_redzone()
    {}
    void
    __asan_alloca_poison()
    {}
    void
    __asan_allocas_unpoison()
    {}
    void
    __asan_default_suppressions()
    {}
    void
    __asan_handle_vfork()
    {}
    void
    __asan_update_allocation_context()
    {}
    void
    __asan_report_load1()
    {}
    void
    __asan_report_load2()
    {}
    void
    __asan_report_load4()
    {}
    void
    __asan_report_load8()
    {}
    void
    __asan_report_load16()
    {}
    void
    __asan_report_store1()
    {}
    void
    __asan_report_store2()
    {}
    void
    __asan_report_store4()
    {}
    void
    __asan_report_store8()
    {}
    void
    __asan_report_store16()
    {}
    void
    __sanitizer_set_report_path()
    {}
    void
    __sanitizer_set_report_fd()
    {}
    void
    __sanitizer_sandbox_on_notify()
    {}
    void
    __sanitizer_report_error_summary()
    {}
    void
    __sanitizer_cov_dump()
    {}
    void
    __sanitizer_dump_coverage()
    {}
    void
    __sanitizer_dump_trace_pc_guard_coverage()
    {}
    void
    __sanitizer_cov()
    {}
    void
    __sanitizer_acquire_crash_state()
    {}
    void
    __sanitizer_annotate_contiguous_container()
    {}
    void
    __sanitizer_verify_contiguous_container()
    {}
    void
    __sanitizer_contiguous_container_find_bad_address()
    {}
    void
    __sanitizer_get_module_and_offset_for_pc()
    {}
    void
    __sanitizer_cov_trace_cmp()
    {}
    void
    __sanitizer_cov_trace_cmp1()
    {}
    void
    __sanitizer_cov_trace_cmp2()
    {}
    void
    __sanitizer_cov_trace_cmp4()
    {}
    void
    __sanitizer_cov_trace_cmp8()
    {}
    void
    __sanitizer_cov_trace_const_cmp1()
    {}
    void
    __sanitizer_cov_trace_const_cmp2()
    {}
    void
    __sanitizer_cov_trace_const_cmp4()
    {}
    void
    __sanitizer_cov_trace_const_cmp8()
    {}
    void
    __sanitizer_cov_trace_switch()
    {}
    void
    __sanitizer_cov_trace_div4()
    {}
    void
    __sanitizer_cov_trace_div8()
    {}
    void
    __sanitizer_cov_trace_gep()
    {}
    void
    __sanitizer_cov_trace_pc_indir()
    {}
    void
    __sanitizer_cov_trace_pc_guard()
    {}
    void
    __sanitizer_cov_trace_pc_guard_init()
    {}
    void
    __sanitizer_cov_8bit_counters_init()
    {}
    void
    __sanitizer_cov_bool_flag_init()
    {}
    void
    __sanitizer_cov_pcs_init()
    {}
}
