// Copyright (c) Microsoft Corporation
// SPDX-License-Identifier: MIT

// Do not alter this generated file.
// This file was generated from tail_call_multiple.o

#include "bpf2c.h"

static map_entry_t _maps[] = {
{ NULL, { 3, 4, 4, 10, 0, 0, 0, 0,  }, "map" },
};

static void _get_maps(_Outptr_result_buffer_(*count) map_entry_t** maps, _Out_ size_t* count)
{
	*maps = _maps;
	*count = 1;
}

static helper_function_entry_t caller_helpers[] = {
{ NULL, 5, "helper_id_5"},
};

static GUID caller_program_type_guid = {0xf1832a85, 0x85d5, 0x45b0, {0x98, 0xa0, 0x70, 0x69, 0xd6, 0x30, 0x13, 0xb0}};
static GUID caller_attach_type_guid = {0x85e0d8ef, 0x579e, 0x4931, {0xb0, 0x72, 0x8e, 0xe2, 0x26, 0xbb, 0x2e, 0x9d}};
static uint16_t caller_maps[] = {
0,
};

static uint64_t caller(void* context)
{
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	// Prologue
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	uint64_t stack[(UBPF_STACK_SIZE + 7) / 8];
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r0 = 0;
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r1 = 0;
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r2 = 0;
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r3 = 0;
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r4 = 0;
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r5 = 0;
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r10 = 0;

#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r1 = (uintptr_t)context;
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r10 = (uintptr_t)((uint8_t*)stack + sizeof(stack));

	// EBPF_OP_LDDW pc=0 dst=r2 src=r0 offset=0 imm=0
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r2 = POINTER(_maps[0].address);
	// EBPF_OP_MOV64_IMM pc=2 dst=r3 src=r0 offset=0 imm=0
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r3 = IMMEDIATE(0);
	// EBPF_OP_CALL pc=3 dst=r0 src=r0 offset=0 imm=5
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r0 = caller_helpers[0].address
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	(r1, r2, r3, r4, r5);
#line 14 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	if ((caller_helpers[0].tail_call) && (r0 == 0)) return 0;
	// EBPF_OP_MOV64_IMM pc=4 dst=r0 src=r0 offset=0 imm=1
#line 17 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r0 = IMMEDIATE(1);
	// EBPF_OP_EXIT pc=5 dst=r0 src=r0 offset=0 imm=0
#line 17 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	return r0;
#line 17 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
}
#line __LINE__ __FILE__

static helper_function_entry_t callee0_helpers[] = {
{ NULL, 5, "helper_id_5"},
};

static GUID callee0_program_type_guid = {0xf1832a85, 0x85d5, 0x45b0, {0x98, 0xa0, 0x70, 0x69, 0xd6, 0x30, 0x13, 0xb0}};
static GUID callee0_attach_type_guid = {0x85e0d8ef, 0x579e, 0x4931, {0xb0, 0x72, 0x8e, 0xe2, 0x26, 0xbb, 0x2e, 0x9d}};
static uint16_t callee0_maps[] = {
0,
};

static uint64_t callee0(void* context)
{
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	// Prologue
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	uint64_t stack[(UBPF_STACK_SIZE + 7) / 8];
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r0 = 0;
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r1 = 0;
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r2 = 0;
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r3 = 0;
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r4 = 0;
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r5 = 0;
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r10 = 0;

#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r1 = (uintptr_t)context;
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r10 = (uintptr_t)((uint8_t*)stack + sizeof(stack));

	// EBPF_OP_LDDW pc=0 dst=r2 src=r0 offset=0 imm=0
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r2 = POINTER(_maps[0].address);
	// EBPF_OP_MOV64_IMM pc=2 dst=r3 src=r0 offset=0 imm=9
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r3 = IMMEDIATE(9);
	// EBPF_OP_CALL pc=3 dst=r0 src=r0 offset=0 imm=5
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r0 = callee0_helpers[0].address
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	(r1, r2, r3, r4, r5);
#line 25 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	if ((callee0_helpers[0].tail_call) && (r0 == 0)) return 0;
	// EBPF_OP_MOV64_IMM pc=4 dst=r0 src=r0 offset=0 imm=2
#line 28 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r0 = IMMEDIATE(2);
	// EBPF_OP_EXIT pc=5 dst=r0 src=r0 offset=0 imm=0
#line 28 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	return r0;
#line 28 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
}
#line __LINE__ __FILE__

static GUID callee1_program_type_guid = {0xf1832a85, 0x85d5, 0x45b0, {0x98, 0xa0, 0x70, 0x69, 0xd6, 0x30, 0x13, 0xb0}};
static GUID callee1_attach_type_guid = {0x85e0d8ef, 0x579e, 0x4931, {0xb0, 0x72, 0x8e, 0xe2, 0x26, 0xbb, 0x2e, 0x9d}};
static uint64_t callee1(void* context)
{
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	// Prologue
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	uint64_t stack[(UBPF_STACK_SIZE + 7) / 8];
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r0 = 0;
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r1 = 0;
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r2 = 0;
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r3 = 0;
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	register uint64_t r10 = 0;

#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r1 = (uintptr_t)context;
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r10 = (uintptr_t)((uint8_t*)stack + sizeof(stack));

	// EBPF_OP_MOV64_IMM pc=0 dst=r0 src=r0 offset=0 imm=3
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	r0 = IMMEDIATE(3);
	// EBPF_OP_EXIT pc=1 dst=r0 src=r0 offset=0 imm=0
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
	return r0;
#line 31 "E:\\ebpf-for-windows\\tests\\sample/tail_call_multiple.c"
}
#line __LINE__ __FILE__

static program_entry_t _programs[] = {
	{ caller, "xdp_prog", "caller", caller_maps, 1, caller_helpers, 1, 6, &caller_program_type_guid, &caller_attach_type_guid, },
	{ callee0, "xdp_prog/0", "callee0", callee0_maps, 1, callee0_helpers, 1, 6, &callee0_program_type_guid, &callee0_attach_type_guid, },
	{ callee1, "xdp_prog/1", "callee1", NULL, 0, NULL, 0, 2, &callee1_program_type_guid, &callee1_attach_type_guid, },
};

static void _get_programs(_Outptr_result_buffer_(*count) program_entry_t** programs, _Out_ size_t* count)
{
	*programs = _programs;
	*count = 3;
}


metadata_table_t tail_call_multiple_metadata_table = { _get_programs, _get_maps };
